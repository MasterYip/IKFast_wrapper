/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2023-11-29 06:10:24.653746
/// Generated using solver translation3d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;
x0=IKcos(j[1]);
x1=IKcos(j[0]);
x2=IKsin(j[0]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[2]);
x6=((0.5)*x4);
x7=(x3*x4);
x8=(x0*x5);
x9=((((0.433012752365271)*x1))+(((-0.249999912578089)*x2)));
x10=((((-0.433012752365271)*x2))+(((-0.249999912578089)*x1)));
x11=(x0*x9);
eetrans[0]=((-0.2)+((x0*x10))+(((-0.15588457)*x2))+((x10*x8))+((x10*x7))+(((-0.09)*x1)));
eetrans[1]=((0.3464)+((x7*x9))+((x8*x9))+x11+(((-0.09)*x2))+(((0.15588457)*x1)));
eetrans[2]=(x6+((x5*x6))+(((-0.5)*x0*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((-0.3464)+py);
new_py=((-0.2)+(((-1.0)*px)));
new_pz=pz;
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
sj2array[0]=((-0.935200001671833)+(((2.0)*(pz*pz))));
if( sj2array[0] >= -1-IKFAST_SINCOS_THRESH && sj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKasin(sj2array[0]);
    cj2array[0] = IKcos(j2array[0]);
    sj2array[1] = sj2array[0];
    j2array[1] = j2array[0] > 0 ? (IKPI-j2array[0]) : (-IKPI-j2array[0]);
    cj2array[1] = -cj2array[0];
}
else if( isnan(sj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x12=pz*pz;
IkReal x13=((6.6666651125e+15)*pz);
j1eval[0]=((1.0)+(((30.8641983271572)*x12)));
j1eval[1]=IKsign(((431999888144449.0)+(((1.3333330225e+16)*x12))));
j1eval[2]=((IKabs(((-1.19999970477007e+15)+(((-1.19999970477007e+15)*sj2))+(((-1.0)*cj2*x13)))))+(IKabs((((sj2*x13))+(((-1.19999970477007e+15)*cj2))+x13))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x14=pz*pz;
IkReal x15=cj2*cj2;
j1eval[0]=((-1.0)+(((-30.8641983271572)*x14)));
j1eval[1]=IKsign(((-431999888144449.0)+(((-1.3333330225e+16)*x14))));
j1eval[2]=((1.0)+(((29401.1963875012)*(x14*x14*x14)))+(((238.149684594523)*x15))+(((2857.79621513428)*(x14*x14)))+(((92.5925949814716)*x14))+(((7350.2990968753)*x14*x15)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x16=cj2*cj2;
j1eval[0]=((2.0)+(((-1.0)*x16))+(((-30.8641983271572)*x16*(pz*pz)))+(((2.0)*sj2)));
j1eval[1]=((1.0)+(((-5.55555562722193)*cj2*pz))+sj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=-0.17999999767801;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
evalcond[0]=((-0.17999999767801)*(IKsin(j1)));
evalcond[1]=((0.17999999767801)*(IKcos(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x17=cj2*cj2;
IkReal x18=pz*pz;
IkReal x19=((215999944072225.0)*sj2);
IkReal x20=((599999852385034.0)*cj2);
IkReal x21=((1.666666278125e+15)*pz*x17);
CheckValue<IkReal> x22=IKPowWithIntegerCheck(((215999944072225.0)+(((-3.33333255625e+15)*x17*x18))+x19+(((-107999972036112.0)*x17))),-1);
if(!x22.valid){
continue;
}
CheckValue<IkReal> x23=IKPowWithIntegerCheck(((2.77128028727847e+19)+(((-1.53960017945991e+20)*cj2*pz))+(((2.77128028727847e+19)*sj2))),-1);
if(!x23.valid){
continue;
}
if( IKabs(((x22.value)*(((((-1.0)*sj2*x21))+(((-1.0)*sj2*x20))+(((299999926192517.0)*(cj2*cj2*cj2)))+(((-1.0)*x20))+(((-1.0)*x21))+((pz*x19))+(((215999944072225.0)*pz))+(((1.19999970477007e+15)*cj2*x18)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x23.value)*(((-9.97660890550476e+18)+(((7.69800089729954e+19)*x17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x22.value)*(((((-1.0)*sj2*x21))+(((-1.0)*sj2*x20))+(((299999926192517.0)*(cj2*cj2*cj2)))+(((-1.0)*x20))+(((-1.0)*x21))+((pz*x19))+(((215999944072225.0)*pz))+(((1.19999970477007e+15)*cj2*x18))))))+IKsqr(((x23.value)*(((-9.97660890550476e+18)+(((7.69800089729954e+19)*x17))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x22.value)*(((((-1.0)*sj2*x21))+(((-1.0)*sj2*x20))+(((299999926192517.0)*(cj2*cj2*cj2)))+(((-1.0)*x20))+(((-1.0)*x21))+((pz*x19))+(((215999944072225.0)*pz))+(((1.19999970477007e+15)*cj2*x18))))), ((x23.value)*(((-9.97660890550476e+18)+(((7.69800089729954e+19)*x17))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x24=IKcos(j1);
IkReal x25=IKsin(j1);
IkReal x26=((1.0)*pz);
IkReal x27=((0.17999999767801)*x24);
IkReal x28=((0.5)*x24);
IkReal x29=((0.5)*x25);
evalcond[0]=((((-0.17999999767801)*x25))+(((-1.0)*x24*x26))+(((-0.5)*cj2)));
evalcond[1]=((0.5)+(((0.5)*sj2))+(((-1.0)*x25*x26))+x27);
evalcond[2]=((-0.0323999991640835)+(((-1.0)*x27))+((pz*x25))+(((-1.0)*pz*x26)));
evalcond[3]=((((-1.0)*x26))+((sj2*x29))+(((-1.0)*cj2*x28))+x29);
evalcond[4]=((0.17999999767801)+((sj2*x28))+x28+((cj2*x29)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x30=pz*pz;
CheckValue<IkReal> x31=IKPowWithIntegerCheck(IKsign(((-431999888144449.0)+(((-1.3333330225e+16)*x30)))),-1);
if(!x31.valid){
continue;
}
CheckValue<IkReal> x32 = IKatan2WithCheck(IkReal(((((-1.3333330225e+16)*(pz*pz*pz)))+(((-431999888144449.0)*pz))+(((1.19999970477007e+15)*cj2)))),IkReal(((77759978862901.3)+(((2.39999940954014e+15)*x30))+(((6.6666651125e+15)*cj2*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x32.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x31.value)))+(x32.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x33=IKcos(j1);
IkReal x34=IKsin(j1);
IkReal x35=((1.0)*pz);
IkReal x36=((0.17999999767801)*x33);
IkReal x37=((0.5)*x33);
IkReal x38=((0.5)*x34);
evalcond[0]=((((-1.0)*x33*x35))+(((-0.5)*cj2))+(((-0.17999999767801)*x34)));
evalcond[1]=((0.5)+(((0.5)*sj2))+x36+(((-1.0)*x34*x35)));
evalcond[2]=((-0.0323999991640835)+((pz*x34))+(((-1.0)*pz*x35))+(((-1.0)*x36)));
evalcond[3]=((((-1.0)*x35))+(((-1.0)*cj2*x37))+x38+((sj2*x38)));
evalcond[4]=((0.17999999767801)+((cj2*x38))+x37+((sj2*x37)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x39=((6.6666651125e+15)*pz);
CheckValue<IkReal> x40 = IKatan2WithCheck(IkReal(((((-1.19999970477007e+15)*cj2))+x39+((sj2*x39)))),IkReal(((-1.19999970477007e+15)+(((-1.19999970477007e+15)*sj2))+(((-1.0)*cj2*x39)))),IKFAST_ATAN2_MAGTHRESH);
if(!x40.valid){
continue;
}
CheckValue<IkReal> x41=IKPowWithIntegerCheck(IKsign(((431999888144449.0)+(((1.3333330225e+16)*(pz*pz))))),-1);
if(!x41.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x40.value)+(((1.5707963267949)*(x41.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x42=IKcos(j1);
IkReal x43=IKsin(j1);
IkReal x44=((1.0)*pz);
IkReal x45=((0.17999999767801)*x42);
IkReal x46=((0.5)*x42);
IkReal x47=((0.5)*x43);
evalcond[0]=((((-1.0)*x42*x44))+(((-0.17999999767801)*x43))+(((-0.5)*cj2)));
evalcond[1]=((0.5)+(((0.5)*sj2))+(((-1.0)*x43*x44))+x45);
evalcond[2]=((-0.0323999991640835)+((pz*x43))+(((-1.0)*x45))+(((-1.0)*pz*x44)));
evalcond[3]=((((-1.0)*x44))+(((-1.0)*cj2*x46))+((sj2*x47))+x47);
evalcond[4]=((0.17999999767801)+((cj2*x47))+((sj2*x46))+x46);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
sj2array[0]=((-0.935200001671833)+(((2.0)*(pz*pz))));
if( sj2array[0] >= -1-IKFAST_SINCOS_THRESH && sj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKasin(sj2array[0]);
    cj2array[0] = IKcos(j2array[0]);
    sj2array[1] = sj2array[0];
    j2array[1] = j2array[0] > 0 ? (IKPI-j2array[0]) : (-IKPI-j2array[0]);
    cj2array[1] = -cj2array[0];
}
else if( isnan(sj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x48=pz*pz;
IkReal x49=((6.6666651125e+15)*pz);
j1eval[0]=((1.0)+(((30.8641983271572)*x48)));
j1eval[1]=IKsign(((431999888144449.0)+(((1.3333330225e+16)*x48))));
j1eval[2]=((IKabs(((-1.19999970477007e+15)+(((-1.19999970477007e+15)*sj2))+(((-1.0)*cj2*x49)))))+(IKabs(((((-1.19999970477007e+15)*cj2))+((sj2*x49))+x49))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x50=pz*pz;
IkReal x51=cj2*cj2;
j1eval[0]=((-1.0)+(((-30.8641983271572)*x50)));
j1eval[1]=IKsign(((-431999888144449.0)+(((-1.3333330225e+16)*x50))));
j1eval[2]=((1.0)+(((7350.2990968753)*x50*x51))+(((92.5925949814716)*x50))+(((2857.79621513428)*(x50*x50)))+(((29401.1963875012)*(x50*x50*x50)))+(((238.149684594523)*x51)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x52=cj2*cj2;
j1eval[0]=((2.0)+(((-30.8641983271572)*x52*(pz*pz)))+(((2.0)*sj2))+(((-1.0)*x52)));
j1eval[1]=((1.0)+(((-5.55555562722193)*cj2*pz))+sj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=-0.17999999767801;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
evalcond[0]=((-0.17999999767801)*(IKsin(j1)));
evalcond[1]=((0.17999999767801)*(IKcos(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x53=((1.0)+(((30.8641983271572)*(pz*pz))));
if((x53) < -0.00001)
continue;
IkReal x54=IKabs(IKsqrt(x53));
IkReal x59 = x53;
if(IKabs(x59)==0){
continue;
}
IkReal x55=pow(x59,-0.5);
CheckValue<IkReal> x60=IKPowWithIntegerCheck(x54,-1);
if(!x60.valid){
continue;
}
IkReal x56=x60.value;
IkReal x57=((5.55555562722193)*pz*x55);
if((((1.0)+(((-1.0)*(x56*x56))))) < -0.00001)
continue;
IkReal x58=IKsqrt(((1.0)+(((-1.0)*(x56*x56)))));
if( (x56) < -1-IKFAST_SINCOS_THRESH || (x56) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x61 = IKatan2WithCheck(IkReal(((-5.55555562722193)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x61.valid){
continue;
}
IkReal gconst18=((((-1.0)*(IKasin(x56))))+(((-1.0)*(x61.value))));
IkReal gconst19=(((x57*x58))+(((-1.0)*x55*x56)));
IkReal gconst20=(((x56*x57))+((x55*x58)));
CheckValue<IkReal> x62 = IKatan2WithCheck(IkReal(((-5.55555562722193)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x62.valid){
continue;
}
if((((1.0)+(((30.8641983271572)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x63=IKPowWithIntegerCheck(IKabs(IKsqrt(((1.0)+(((30.8641983271572)*(pz*pz)))))),-1);
if(!x63.valid){
continue;
}
if( (x63.value) < -1-IKFAST_SINCOS_THRESH || (x63.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x62.value)+(IKasin(x63.value))+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x64=pz*pz;
IkReal x65=x53;
if((x65) < -0.00001)
continue;
IkReal x66=IKabs(IKsqrt(x65));
IkReal x72 = x65;
if(IKabs(x72)==0){
continue;
}
IkReal x67=pow(x72,-0.5);
CheckValue<IkReal> x73=IKPowWithIntegerCheck(x66,-1);
if(!x73.valid){
continue;
}
IkReal x68=x73.value;
IkReal x69=((5.55555562722193)*pz*x67);
if( (x68) < -1-IKFAST_SINCOS_THRESH || (x68) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x70=((1.0)*(IKasin(x68)));
if((((1.0)+(((-1.0)*(x68*x68))))) < -0.00001)
continue;
IkReal x71=IKsqrt(((1.0)+(((-1.0)*(x68*x68)))));
px=0;
py=0;
pp=x64;
sj2=gconst19;
cj2=gconst20;
CheckValue<IkReal> x74 = IKatan2WithCheck(IkReal(((-5.55571924494627)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x74.valid){
continue;
}
j2=((((-1.0)*x70))+(((-1.0)*(x74.value))));
CheckValue<IkReal> x75 = IKatan2WithCheck(IkReal(((-5.55555562722193)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x75.valid){
continue;
}
IkReal gconst18=((((-1.0)*x70))+(((-1.0)*(x75.value))));
IkReal gconst19=(((x69*x71))+(((-1.0)*x67*x68)));
IkReal gconst20=(((x67*x71))+((x68*x69)));
IkReal x76=pz*pz;
j1eval[0]=((1.0)+(((30.8641983271572)*x76)));
j1eval[1]=IKsign(((431999888144449.0)+(((1.3333330225e+16)*x76))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x77=gconst20*gconst20;
IkReal x78=gconst19*gconst19;
IkReal x79=pz*pz;
IkReal x80=((299999926192517.0)*gconst20);
IkReal x81=(gconst19*pz);
IkReal x82=((1.666666278125e+15)*x77);
CheckValue<IkReal> x83=IKPowWithIntegerCheck(((107999972036112.0)+(((215999944072225.0)*gconst19))+(((107999972036112.0)*x78))+(((-3.33333255625e+15)*x77*x79))),-1);
if(!x83.valid){
continue;
}
CheckValue<IkReal> x84=IKPowWithIntegerCheck(((2.77128028727847e+19)+(((2.77128028727847e+19)*gconst19))+(((-1.53960017945991e+20)*gconst20*pz))),-1);
if(!x84.valid){
continue;
}
if( IKabs(((x83.value)*(((((-1.0)*x81*x82))+(((1.19999970477007e+15)*gconst20*x79))+(((-599999852385034.0)*gconst19*gconst20))+(((215999944072225.0)*pz))+(((-1.0)*x78*x80))+(((215999944072225.0)*x81))+(((-1.0)*x80))+(((-1.0)*pz*x82)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x84.value)*(((-9.97660890550476e+18)+(((7.69800089729954e+19)*x77)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x83.value)*(((((-1.0)*x81*x82))+(((1.19999970477007e+15)*gconst20*x79))+(((-599999852385034.0)*gconst19*gconst20))+(((215999944072225.0)*pz))+(((-1.0)*x78*x80))+(((215999944072225.0)*x81))+(((-1.0)*x80))+(((-1.0)*pz*x82))))))+IKsqr(((x84.value)*(((-9.97660890550476e+18)+(((7.69800089729954e+19)*x77))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x83.value)*(((((-1.0)*x81*x82))+(((1.19999970477007e+15)*gconst20*x79))+(((-599999852385034.0)*gconst19*gconst20))+(((215999944072225.0)*pz))+(((-1.0)*x78*x80))+(((215999944072225.0)*x81))+(((-1.0)*x80))+(((-1.0)*pz*x82))))), ((x84.value)*(((-9.97660890550476e+18)+(((7.69800089729954e+19)*x77))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x85=IKcos(j1);
IkReal x86=IKsin(j1);
IkReal x87=((1.0)*pz);
IkReal x88=((0.17999999767801)*x85);
IkReal x89=((0.5)*x86);
IkReal x90=((0.5)*x85);
evalcond[0]=((((-0.5)*gconst20))+(((-0.17999999767801)*x86))+(((-1.0)*x85*x87)));
evalcond[1]=((0.5)+(((0.5)*gconst19))+(((-1.0)*x86*x87))+x88);
evalcond[2]=((-0.0323999991640835)+((pz*x86))+(((-1.0)*x88))+(((-1.0)*pz*x87)));
evalcond[3]=(((gconst19*x89))+(((-1.0)*gconst20*x90))+x89+(((-1.0)*x87)));
evalcond[4]=((0.17999999767801)+((gconst19*x90))+x90+((gconst20*x89)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x91=((6.6666651125e+15)*pz);
CheckValue<IkReal> x92 = IKatan2WithCheck(IkReal(((((-1.19999970477007e+15)*gconst20))+((gconst19*x91))+x91)),IkReal(((-1.19999970477007e+15)+(((-1.19999970477007e+15)*gconst19))+(((-1.0)*gconst20*x91)))),IKFAST_ATAN2_MAGTHRESH);
if(!x92.valid){
continue;
}
CheckValue<IkReal> x93=IKPowWithIntegerCheck(IKsign(((431999888144449.0)+(((1.3333330225e+16)*(pz*pz))))),-1);
if(!x93.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x92.value)+(((1.5707963267949)*(x93.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x94=IKcos(j1);
IkReal x95=IKsin(j1);
IkReal x96=((1.0)*pz);
IkReal x97=((0.17999999767801)*x94);
IkReal x98=((0.5)*x95);
IkReal x99=((0.5)*x94);
evalcond[0]=((((-1.0)*x94*x96))+(((-0.5)*gconst20))+(((-0.17999999767801)*x95)));
evalcond[1]=((0.5)+(((-1.0)*x95*x96))+(((0.5)*gconst19))+x97);
evalcond[2]=((-0.0323999991640835)+(((-1.0)*pz*x96))+((pz*x95))+(((-1.0)*x97)));
evalcond[3]=(((gconst19*x98))+(((-1.0)*gconst20*x99))+x98+(((-1.0)*x96)));
evalcond[4]=((0.17999999767801)+((gconst19*x99))+x99+((gconst20*x98)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x100=((1.0)+(((30.8641983271572)*(pz*pz))));
IkReal x107 = x100;
if(IKabs(x107)==0){
continue;
}
IkReal x101=pow(x107,-0.5);
if((x100) < -0.00001)
continue;
IkReal x102=IKabs(IKsqrt(x100));
IkReal x103=((1.0)*x101);
CheckValue<IkReal> x108=IKPowWithIntegerCheck(x102,-1);
if(!x108.valid){
continue;
}
IkReal x104=x108.value;
IkReal x105=((5.55555562722193)*pz*x101);
if((((1.0)+(((-1.0)*(x104*x104))))) < -0.00001)
continue;
IkReal x106=IKsqrt(((1.0)+(((-1.0)*(x104*x104)))));
if( (x104) < -1-IKFAST_SINCOS_THRESH || (x104) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x109 = IKatan2WithCheck(IkReal(((-5.55555562722193)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x109.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(IKasin(x104))+(((-1.0)*(x109.value))));
IkReal gconst22=((((-1.0)*x103*x104))+(((-1.0)*x105*x106)));
IkReal gconst23=((((-1.0)*x103*x106))+((x104*x105)));
if((((1.0)+(((30.8641983271572)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x110=IKPowWithIntegerCheck(IKabs(IKsqrt(((1.0)+(((30.8641983271572)*(pz*pz)))))),-1);
if(!x110.valid){
continue;
}
if( (x110.value) < -1-IKFAST_SINCOS_THRESH || (x110.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x111 = IKatan2WithCheck(IkReal(((-5.55555562722193)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x111.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(x110.value))))+(x111.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x112=pz*pz;
IkReal x113=x100;
IkReal x121 = x113;
if(IKabs(x121)==0){
continue;
}
IkReal x114=pow(x121,-0.5);
if((x113) < -0.00001)
continue;
IkReal x115=IKabs(IKsqrt(x113));
IkReal x116=((1.0)*x114);
CheckValue<IkReal> x122=IKPowWithIntegerCheck(x115,-1);
if(!x122.valid){
continue;
}
IkReal x117=x122.value;
IkReal x118=((5.55555562722193)*pz*x114);
if( (x117) < -1-IKFAST_SINCOS_THRESH || (x117) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x119=IKasin(x117);
if((((1.0)+(((-1.0)*(x117*x117))))) < -0.00001)
continue;
IkReal x120=IKsqrt(((1.0)+(((-1.0)*(x117*x117)))));
px=0;
py=0;
pp=x112;
sj2=gconst22;
cj2=gconst23;
CheckValue<IkReal> x123 = IKatan2WithCheck(IkReal(((-5.55571924494627)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x123.valid){
continue;
}
j2=((3.14159265)+(((-1.0)*(x123.value)))+x119);
CheckValue<IkReal> x124 = IKatan2WithCheck(IkReal(((-5.55555562722193)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
if(!x124.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+x119+(((-1.0)*(x124.value))));
IkReal gconst22=((((-1.0)*x118*x120))+(((-1.0)*x116*x117)));
IkReal gconst23=((((-1.0)*x116*x120))+((x117*x118)));
IkReal x125=pz*pz;
j1eval[0]=((1.0)+(((30.8641983271572)*x125)));
j1eval[1]=IKsign(((431999888144449.0)+(((1.3333330225e+16)*x125))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x126=gconst23*gconst23;
IkReal x127=gconst22*gconst22;
IkReal x128=pz*pz;
IkReal x129=((299999926192517.0)*gconst23);
IkReal x130=((215999944072225.0)*pz);
IkReal x131=((1.666666278125e+15)*pz*x126);
CheckValue<IkReal> x132=IKPowWithIntegerCheck(((107999972036112.0)+(((215999944072225.0)*gconst22))+(((107999972036112.0)*x127))+(((-3.33333255625e+15)*x126*x128))),-1);
if(!x132.valid){
continue;
}
CheckValue<IkReal> x133=IKPowWithIntegerCheck(((2.77128028727847e+19)+(((2.77128028727847e+19)*gconst22))+(((-1.53960017945991e+20)*gconst23*pz))),-1);
if(!x133.valid){
continue;
}
if( IKabs(((x132.value)*(((((-599999852385034.0)*gconst22*gconst23))+(((-1.0)*x129))+x130+(((-1.0)*x131))+((gconst22*x130))+(((1.19999970477007e+15)*gconst23*x128))+(((-1.0)*x127*x129))+(((-1.0)*gconst22*x131)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x133.value)*(((-9.97660890550476e+18)+(((7.69800089729954e+19)*x126)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x132.value)*(((((-599999852385034.0)*gconst22*gconst23))+(((-1.0)*x129))+x130+(((-1.0)*x131))+((gconst22*x130))+(((1.19999970477007e+15)*gconst23*x128))+(((-1.0)*x127*x129))+(((-1.0)*gconst22*x131))))))+IKsqr(((x133.value)*(((-9.97660890550476e+18)+(((7.69800089729954e+19)*x126))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x132.value)*(((((-599999852385034.0)*gconst22*gconst23))+(((-1.0)*x129))+x130+(((-1.0)*x131))+((gconst22*x130))+(((1.19999970477007e+15)*gconst23*x128))+(((-1.0)*x127*x129))+(((-1.0)*gconst22*x131))))), ((x133.value)*(((-9.97660890550476e+18)+(((7.69800089729954e+19)*x126))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x134=IKcos(j1);
IkReal x135=IKsin(j1);
IkReal x136=((0.5)*gconst23);
IkReal x137=((1.0)*pz);
IkReal x138=((0.17999999767801)*x134);
IkReal x139=((0.5)*x135);
IkReal x140=((0.5)*x134);
evalcond[0]=((((-1.0)*x134*x137))+(((-1.0)*x136))+(((-0.17999999767801)*x135)));
evalcond[1]=((0.5)+(((-1.0)*x135*x137))+(((0.5)*gconst22))+x138);
evalcond[2]=((-0.0323999991640835)+(((-1.0)*pz*x137))+((pz*x135))+(((-1.0)*x138)));
evalcond[3]=((((-1.0)*x134*x136))+x139+(((-1.0)*x137))+((gconst22*x139)));
evalcond[4]=((0.17999999767801)+((x135*x136))+x140+((gconst22*x140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x141=((6.6666651125e+15)*pz);
CheckValue<IkReal> x142 = IKatan2WithCheck(IkReal(((((-1.19999970477007e+15)*gconst23))+x141+((gconst22*x141)))),IkReal(((-1.19999970477007e+15)+(((-1.19999970477007e+15)*gconst22))+(((-1.0)*gconst23*x141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x142.valid){
continue;
}
CheckValue<IkReal> x143=IKPowWithIntegerCheck(IKsign(((431999888144449.0)+(((1.3333330225e+16)*(pz*pz))))),-1);
if(!x143.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x142.value)+(((1.5707963267949)*(x143.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x144=IKcos(j1);
IkReal x145=IKsin(j1);
IkReal x146=((0.5)*gconst23);
IkReal x147=((1.0)*pz);
IkReal x148=((0.17999999767801)*x144);
IkReal x149=((0.5)*x145);
IkReal x150=((0.5)*x144);
evalcond[0]=((((-1.0)*x146))+(((-1.0)*x144*x147))+(((-0.17999999767801)*x145)));
evalcond[1]=((0.5)+(((0.5)*gconst22))+x148+(((-1.0)*x145*x147)));
evalcond[2]=((-0.0323999991640835)+(((-1.0)*x148))+((pz*x145))+(((-1.0)*pz*x147)));
evalcond[3]=((((-1.0)*x147))+(((-1.0)*x144*x146))+x149+((gconst22*x149)));
evalcond[4]=((0.17999999767801)+((x145*x146))+x150+((gconst22*x150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj2))+(IKabs(((-0.00419903978333044)+(((-0.259199993312668)*(pz*pz)))+(((-4.0)*(pz*pz*pz*pz))))))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(pz) < IKFAST_ATAN2_MAGTHRESH && IKabs(-0.17999999767801) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(pz)+IKsqr(-0.17999999767801)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(pz, -0.17999999767801);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x151=IKcos(j1);
IkReal x152=IKsin(j1);
IkReal x153=((1.0)*pz);
IkReal x154=((0.17999999767801)*x151);
evalcond[0]=((((-1.0)*x153))+x152);
evalcond[1]=((0.17999999767801)+x151);
evalcond[2]=((((-0.17999999767801)*x152))+(((-1.0)*x151*x153)));
evalcond[3]=((1.0)+x154+(((-1.0)*x152*x153)));
evalcond[4]=((-0.0323999991640835)+(((-1.0)*x154))+(((-1.0)*pz*x153))+((pz*x152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj2))+(IKabs(((-0.00419903978333044)+(((-0.259199993312668)*(pz*pz)))+(((-4.0)*(pz*pz*pz*pz))))))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=-0.17999999767801;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
evalcond[0]=((-0.17999999767801)*(IKsin(j1)));
evalcond[1]=((0.17999999767801)*(IKcos(j1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x155=cj2*cj2;
IkReal x156=pz*pz;
IkReal x157=((215999944072225.0)*sj2);
IkReal x158=((599999852385034.0)*cj2);
IkReal x159=((1.666666278125e+15)*pz*x155);
CheckValue<IkReal> x160=IKPowWithIntegerCheck(((215999944072225.0)+(((-3.33333255625e+15)*x155*x156))+x157+(((-107999972036112.0)*x155))),-1);
if(!x160.valid){
continue;
}
CheckValue<IkReal> x161=IKPowWithIntegerCheck(((2.77128028727847e+19)+(((-1.53960017945991e+20)*cj2*pz))+(((2.77128028727847e+19)*sj2))),-1);
if(!x161.valid){
continue;
}
if( IKabs(((x160.value)*(((((299999926192517.0)*(cj2*cj2*cj2)))+(((-1.0)*x158))+(((-1.0)*x159))+(((1.19999970477007e+15)*cj2*x156))+(((215999944072225.0)*pz))+(((-1.0)*sj2*x159))+(((-1.0)*sj2*x158))+((pz*x157)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x161.value)*(((-9.97660890550476e+18)+(((7.69800089729954e+19)*x155)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x160.value)*(((((299999926192517.0)*(cj2*cj2*cj2)))+(((-1.0)*x158))+(((-1.0)*x159))+(((1.19999970477007e+15)*cj2*x156))+(((215999944072225.0)*pz))+(((-1.0)*sj2*x159))+(((-1.0)*sj2*x158))+((pz*x157))))))+IKsqr(((x161.value)*(((-9.97660890550476e+18)+(((7.69800089729954e+19)*x155))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x160.value)*(((((299999926192517.0)*(cj2*cj2*cj2)))+(((-1.0)*x158))+(((-1.0)*x159))+(((1.19999970477007e+15)*cj2*x156))+(((215999944072225.0)*pz))+(((-1.0)*sj2*x159))+(((-1.0)*sj2*x158))+((pz*x157))))), ((x161.value)*(((-9.97660890550476e+18)+(((7.69800089729954e+19)*x155))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x162=IKcos(j1);
IkReal x163=IKsin(j1);
IkReal x164=((1.0)*pz);
IkReal x165=((0.17999999767801)*x162);
IkReal x166=((0.5)*x162);
IkReal x167=((0.5)*x163);
evalcond[0]=((((-0.17999999767801)*x163))+(((-1.0)*x162*x164))+(((-0.5)*cj2)));
evalcond[1]=((0.5)+(((-1.0)*x163*x164))+(((0.5)*sj2))+x165);
evalcond[2]=((-0.0323999991640835)+(((-1.0)*x165))+((pz*x163))+(((-1.0)*pz*x164)));
evalcond[3]=((((-1.0)*x164))+x167+(((-1.0)*cj2*x166))+((sj2*x167)));
evalcond[4]=((0.17999999767801)+((cj2*x167))+x166+((sj2*x166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x168=pz*pz;
CheckValue<IkReal> x169=IKPowWithIntegerCheck(IKsign(((-431999888144449.0)+(((-1.3333330225e+16)*x168)))),-1);
if(!x169.valid){
continue;
}
CheckValue<IkReal> x170 = IKatan2WithCheck(IkReal(((((-1.3333330225e+16)*(pz*pz*pz)))+(((-431999888144449.0)*pz))+(((1.19999970477007e+15)*cj2)))),IkReal(((77759978862901.3)+(((2.39999940954014e+15)*x168))+(((6.6666651125e+15)*cj2*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x170.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x169.value)))+(x170.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x171=IKcos(j1);
IkReal x172=IKsin(j1);
IkReal x173=((1.0)*pz);
IkReal x174=((0.17999999767801)*x171);
IkReal x175=((0.5)*x171);
IkReal x176=((0.5)*x172);
evalcond[0]=((((-0.17999999767801)*x172))+(((-1.0)*x171*x173))+(((-0.5)*cj2)));
evalcond[1]=((0.5)+(((0.5)*sj2))+x174+(((-1.0)*x172*x173)));
evalcond[2]=((-0.0323999991640835)+((pz*x172))+(((-1.0)*x174))+(((-1.0)*pz*x173)));
evalcond[3]=(((sj2*x176))+(((-1.0)*x173))+x176+(((-1.0)*cj2*x175)));
evalcond[4]=((0.17999999767801)+((sj2*x175))+x175+((cj2*x176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x177=((6.6666651125e+15)*pz);
CheckValue<IkReal> x178 = IKatan2WithCheck(IkReal((((sj2*x177))+x177+(((-1.19999970477007e+15)*cj2)))),IkReal(((-1.19999970477007e+15)+(((-1.19999970477007e+15)*sj2))+(((-1.0)*cj2*x177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x178.valid){
continue;
}
CheckValue<IkReal> x179=IKPowWithIntegerCheck(IKsign(((431999888144449.0)+(((1.3333330225e+16)*(pz*pz))))),-1);
if(!x179.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x178.value)+(((1.5707963267949)*(x179.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x180=IKcos(j1);
IkReal x181=IKsin(j1);
IkReal x182=((1.0)*pz);
IkReal x183=((0.17999999767801)*x180);
IkReal x184=((0.5)*x180);
IkReal x185=((0.5)*x181);
evalcond[0]=((((-0.17999999767801)*x181))+(((-1.0)*x180*x182))+(((-0.5)*cj2)));
evalcond[1]=((0.5)+(((0.5)*sj2))+x183+(((-1.0)*x181*x182)));
evalcond[2]=((-0.0323999991640835)+((pz*x181))+(((-1.0)*pz*x182))+(((-1.0)*x183)));
evalcond[3]=(((sj2*x185))+(((-1.0)*x182))+x185+(((-1.0)*cj2*x184)));
evalcond[4]=((0.17999999767801)+((sj2*x184))+x184+((cj2*x185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x187 = IKatan2WithCheck(IkReal(((((0.866025504730542)*py))+(((-0.499999825156179)*px)))),IkReal(((((-0.866025504730542)*px))+(((-0.499999825156179)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x187.valid){
continue;
}
IkReal x186=x187.value;
j0array[0]=((-1.0)*x186);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x186)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
sj2array[0]=((-0.935200001671833)+(((-0.35999986946847)*cj0*py))+(((-0.623538355362379)*py*sj0))+(((0.35999986946847)*px*sj0))+(((2.0)*(pz*pz)))+(((-0.623538355362379)*cj0*px))+(((2.0)*(py*py)))+(((2.0)*(px*px))));
if( sj2array[0] >= -1-IKFAST_SINCOS_THRESH && sj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKasin(sj2array[0]);
    cj2array[0] = IKcos(j2array[0]);
    sj2array[1] = sj2array[0];
    j2array[1] = j2array[0] > 0 ? (IKPI-j2array[0]) : (-IKPI-j2array[0]);
    cj2array[1] = -cj2array[0];
}
else if( isnan(sj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
j1eval[0]=((1.0)+sj2);
j1eval[1]=IKsign(((2.0)+(((2.0)*sj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x188=(cj2*pz);
IkReal x189=(cj0*px);
IkReal x190=((0.866025504730542)*sj2);
IkReal x191=(cj0*py);
IkReal x192=(py*sj0);
IkReal x193=((4.81125286612347)*sj2);
IkReal x194=((2.77777684225639)*sj2);
IkReal x195=(px*sj0);
IkReal x196=((0.499999825156179)*x195);
j1eval[0]=((-1.0)+(((-1.0)*sj2))+(((-1.0)*x194*x195))+(((2.77777684225639)*x191))+((x189*x193))+(((5.55555562722193)*x188))+(((-2.77777684225639)*x195))+(((4.81125286612347)*x192))+((x192*x193))+(((4.81125286612347)*x189))+((x191*x194)));
j1eval[1]=IKsign(((-0.17999999767801)+(((-1.0)*x196))+((x189*x190))+x188+(((0.499999825156179)*x191))+(((-1.0)*sj2*x196))+(((-0.17999999767801)*sj2))+((x190*x192))+(((0.866025504730542)*x192))+(((0.499999825156179)*sj2*x191))+(((0.866025504730542)*x189))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x197=(cj2*py);
IkReal x198=((5.55555562722193)*pz);
IkReal x199=(cj2*px);
j1eval[0]=((((2.77777684225639)*cj0*x197))+(((-1.0)*x198))+(((-2.77777684225639)*sj0*x199))+(((4.81125286612347)*cj0*x199))+(((4.81125286612347)*sj0*x197))+(((-1.0)*sj2*x198))+(((-1.0)*cj2)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=((-1.0)+(((-2.77777684225639)*px*sj0))+(((2.77777684225639)*cj0*py))+(((4.81125286612347)*cj0*px))+(((4.81125286612347)*py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x200=((((4.81125286612347)*py))+(((-2.77777684225639)*px)));
IkReal x201=((((4.81125286612347)*px))+(((2.77777684225639)*py)));
IkReal x202=((x200*x200)+(x201*x201));
if((((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))) < -0.00001)
continue;
IkReal x203=IKabs(IKsqrt(((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))));
CheckValue<IkReal> x210=IKPowWithIntegerCheck(x203,-1);
if(!x210.valid){
continue;
}
IkReal x204=x210.value;
IkReal x211 = x202;
if(IKabs(x211)==0){
continue;
}
IkReal x205=pow(x211,-0.5);
if((((1.0)+(((-1.0)*(x204*x204))))) < -0.00001)
continue;
IkReal x206=IKsqrt(((1.0)+(((-1.0)*(x204*x204)))));
IkReal x207=(x200*x205);
IkReal x208=(x204*x205);
IkReal x209=(x205*x206);
CheckValue<IkReal> x212 = IKatan2WithCheck(IkReal(x201),IkReal(x200),IKFAST_ATAN2_MAGTHRESH);
if(!x212.valid){
continue;
}
if((x202) < -0.00001)
continue;
CheckValue<IkReal> x213=IKPowWithIntegerCheck(IKabs(IKsqrt(x202)),-1);
if(!x213.valid){
continue;
}
if( (x213.value) < -1-IKFAST_SINCOS_THRESH || (x213.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x212.value)))+(IKasin(x213.value)));
IkReal gconst1=(((x204*x207))+(((-1.0)*x201*x209)));
IkReal gconst2=(((x201*x208))+((x206*x207)));
IkReal x214=x200;
IkReal x215=x201;
CheckValue<IkReal> x216 = IKatan2WithCheck(IkReal(x215),IkReal(x214),IKFAST_ATAN2_MAGTHRESH);
if(!x216.valid){
continue;
}
if((((x215*x215)+(x214*x214))) < -0.00001)
continue;
CheckValue<IkReal> x217=IKPowWithIntegerCheck(IKabs(IKsqrt(((x215*x215)+(x214*x214)))),-1);
if(!x217.valid){
continue;
}
if( (x217.value) < -1-IKFAST_SINCOS_THRESH || (x217.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x216.value)+(((-1.0)*(IKasin(x217.value))))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x218=(gconst1*px);
IkReal x219=(gconst2*py);
IkReal x220=(gconst2*px);
IkReal x221=(gconst1*py);
CheckValue<IkReal> x227=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x221))+(((0.866025504730542)*x220))+(((-0.499999825156179)*x218))+(((0.499999825156179)*x219))),-1);
if(!x227.valid){
continue;
}
IkReal x222=x227.value;
IkReal x223=((0.179999934734235)*x222);
IkReal x224=(gconst2*x222);
IkReal x225=(py*x222);
IkReal x226=((0.31176917768119)*x222);
CheckValue<IkReal> x228=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x220))+(((-0.499999825156179)*x218))+(((0.866025504730542)*gconst1*py))+(((0.499999825156179)*x219))),-1);
if(!x228.valid){
continue;
}
CheckValue<IkReal> x229=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x221))+(((0.866025504730542)*x220))+(((-0.499999825156179)*gconst1*px))+(((0.499999825156179)*x219))),-1);
if(!x229.valid){
continue;
}
CheckValue<IkReal> x230=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*gconst2*py))+(((0.866025504730542)*x221))+(((0.866025504730542)*x220))+(((-0.499999825156179)*x218))),-1);
if(!x230.valid){
continue;
}
CheckValue<IkReal> x231=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x221))+(((-0.499999825156179)*x218))+(((0.499999825156179)*x219))+(((0.866025504730542)*gconst2*px))),-1);
if(!x231.valid){
continue;
}
cj1array[0]=(((x222*(px*px)))+(((-0.31176917768119)*x221*(x228.value)))+(((0.0323999991640835)*x222))+(((0.179999934734235)*x218*(x229.value)))+((py*x225))+(((-0.179999934734235)*x219*(x230.value)))+(((-0.31176917768119)*x220*(x231.value))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x232=IKsin(j1);
IkReal x233=IKcos(j1);
IkReal x234=((0.866025504730542)*py);
IkReal x235=((0.499999825156179)*px);
IkReal x236=(gconst1*x232);
IkReal x237=(gconst1*x233);
IkReal x238=((0.866025504730542)*gconst2*px);
IkReal x239=((0.499999825156179)*gconst2*py);
evalcond[0]=(((x234*x236))+(((-1.0)*x235*x236))+((x232*x239))+((x232*x238))+(((-0.17999999767801)*x232)));
evalcond[1]=((((-1.0)*x233*x238))+(((-1.0)*x233*x239))+((x235*x237))+(((0.17999999767801)*x233))+(((-1.0)*x234*x237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x240=((((4.81125286612347)*py))+(((-2.77777684225639)*px)));
IkReal x241=((((4.81125286612347)*px))+(((2.77777684225639)*py)));
IkReal x242=((x240*x240)+(x241*x241));
if((((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))) < -0.00001)
continue;
IkReal x243=IKabs(IKsqrt(((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))));
CheckValue<IkReal> x249=IKPowWithIntegerCheck(x243,-1);
if(!x249.valid){
continue;
}
IkReal x244=x249.value;
IkReal x250 = x242;
if(IKabs(x250)==0){
continue;
}
IkReal x245=pow(x250,-0.5);
if((((1.0)+(((-1.0)*(x244*x244))))) < -0.00001)
continue;
IkReal x246=IKsqrt(((1.0)+(((-1.0)*(x244*x244)))));
IkReal x247=((1.0)*x244*x245);
IkReal x248=((1.0)*x245*x246);
if((x242) < -0.00001)
continue;
CheckValue<IkReal> x251=IKPowWithIntegerCheck(IKabs(IKsqrt(x242)),-1);
if(!x251.valid){
continue;
}
if( (x251.value) < -1-IKFAST_SINCOS_THRESH || (x251.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x252 = IKatan2WithCheck(IkReal(x241),IkReal(x240),IKFAST_ATAN2_MAGTHRESH);
if(!x252.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(IKasin(x251.value))))+(((-1.0)*(x252.value))));
IkReal gconst4=(((x240*x247))+((x241*x248)));
IkReal gconst5=(((x241*x247))+(((-1.0)*x240*x248)));
IkReal x253=j0;
CheckValue<IkReal> x258 = IKatan2WithCheck(IkReal(((((4.81125286612347)*px))+(((2.77777684225639)*py)))),IkReal(((((4.81125286612347)*py))+(((-2.77777684225639)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x258.valid){
continue;
}
IkReal x254=x258.value;
IkReal x255=x254;
if((((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x259=IKPowWithIntegerCheck(IKabs(IKsqrt(((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px)))))),-1);
if(!x259.valid){
continue;
}
if( (x259.value) < -1-IKFAST_SINCOS_THRESH || (x259.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x256=IKasin(x259.value);
IkReal x257=x256;
if((((9.86960440108936)+((x256*x257))+((x253*x254))+((x253*x256))+(((-3.14159265358979)*j0))+(((-3.14159265358979)*x253))+(((-3.14159265358979)*x257))+(((-3.14159265358979)*x256))+(((-3.14159265358979)*x255))+(((-3.14159265358979)*x254))+((j0*x257))+((j0*x255))+((j0*x253))+((x254*x257))+((x254*x255))+((x255*x256)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x256*x257))+((x253*x254))+((x253*x256))+(((-3.14159265358979)*j0))+(((-3.14159265358979)*x253))+(((-3.14159265358979)*x257))+(((-3.14159265358979)*x256))+(((-3.14159265358979)*x255))+(((-3.14159265358979)*x254))+((j0*x257))+((j0*x255))+((j0*x253))+((x254*x257))+((x254*x255))+((x255*x256)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x260=(gconst5*px);
IkReal x261=(gconst4*px);
IkReal x262=(gconst5*py);
IkReal x263=(gconst4*py);
CheckValue<IkReal> x268=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x263))+(((0.866025504730542)*x260))+(((0.499999825156179)*x262))+(((-0.499999825156179)*x261))),-1);
if(!x268.valid){
continue;
}
IkReal x264=x268.value;
IkReal x265=(gconst4*x264);
IkReal x266=((0.179999934734235)*x264);
IkReal x267=((0.31176917768119)*x264);
CheckValue<IkReal> x269=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*gconst5*py))+(((0.866025504730542)*x263))+(((0.866025504730542)*x260))+(((-0.499999825156179)*x261))),-1);
if(!x269.valid){
continue;
}
CheckValue<IkReal> x270=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x260))+(((0.499999825156179)*x262))+(((0.866025504730542)*gconst4*py))+(((-0.499999825156179)*x261))),-1);
if(!x270.valid){
continue;
}
CheckValue<IkReal> x271=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x263))+(((0.499999825156179)*x262))+(((0.866025504730542)*gconst5*px))+(((-0.499999825156179)*x261))),-1);
if(!x271.valid){
continue;
}
CheckValue<IkReal> x272=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x263))+(((0.866025504730542)*x260))+(((0.499999825156179)*x262))+(((-0.499999825156179)*gconst4*px))),-1);
if(!x272.valid){
continue;
}
cj1array[0]=((((-0.179999934734235)*x262*(x269.value)))+(((-0.31176917768119)*x263*(x270.value)))+(((-0.31176917768119)*x260*(x271.value)))+(((0.179999934734235)*x261*(x272.value)))+((x264*(py*py)))+(((0.0323999991640835)*x264))+((x264*(px*px))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x273=IKsin(j1);
IkReal x274=IKcos(j1);
IkReal x275=(gconst4*px);
IkReal x276=(gconst5*px);
IkReal x277=(gconst5*py);
IkReal x278=(gconst4*py);
IkReal x279=((0.499999825156179)*x274);
IkReal x280=((0.866025504730542)*x273);
IkReal x281=((0.499999825156179)*x273);
IkReal x282=((0.866025504730542)*x274);
evalcond[0]=(((x278*x280))+(((-0.17999999767801)*x273))+((x277*x281))+(((-1.0)*x275*x281))+((x276*x280)));
evalcond[1]=(((x275*x279))+(((-1.0)*x277*x279))+(((-1.0)*x276*x282))+(((0.17999999767801)*x274))+(((-1.0)*x278*x282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x283=(px*sj0);
IkReal x284=(cj0*px);
IkReal x285=(cj0*py);
IkReal x286=(py*sj0);
CheckValue<IkReal> x291=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x286))+(((0.866025504730542)*x284))+(((0.499999825156179)*x285))+(((-0.499999825156179)*x283))),-1);
if(!x291.valid){
continue;
}
IkReal x287=x291.value;
IkReal x288=((0.179999934734235)*x287);
IkReal x289=(sj0*x287);
IkReal x290=((0.31176917768119)*x287);
CheckValue<IkReal> x292=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*cj0*py))+(((0.866025504730542)*x286))+(((0.866025504730542)*x284))+(((-0.499999825156179)*x283))),-1);
if(!x292.valid){
continue;
}
CheckValue<IkReal> x293=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x284))+(((0.499999825156179)*x285))+(((-0.499999825156179)*x283))+(((0.866025504730542)*py*sj0))),-1);
if(!x293.valid){
continue;
}
CheckValue<IkReal> x294=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x286))+(((0.866025504730542)*x284))+(((0.499999825156179)*x285))+(((-0.499999825156179)*px*sj0))),-1);
if(!x294.valid){
continue;
}
CheckValue<IkReal> x295=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x286))+(((0.866025504730542)*cj0*px))+(((0.499999825156179)*x285))+(((-0.499999825156179)*x283))),-1);
if(!x295.valid){
continue;
}
cj1array[0]=(((x287*(py*py)))+(((-0.179999934734235)*x285*(x292.value)))+(((0.0323999991640835)*x287))+(((-0.31176917768119)*x286*(x293.value)))+(((0.179999934734235)*x283*(x294.value)))+(((-0.31176917768119)*x284*(x295.value)))+((x287*(px*px))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x296=IKsin(j1);
IkReal x297=IKcos(j1);
IkReal x298=((0.499999825156179)*cj0);
IkReal x299=((0.866025504730542)*sj0);
IkReal x300=(py*x297);
IkReal x301=(py*x296);
IkReal x302=((0.499999825156179)*px*sj0);
IkReal x303=((0.866025504730542)*cj0*px);
evalcond[0]=((((-1.0)*x296*x302))+((x299*x301))+(((-0.17999999767801)*x296))+((x298*x301))+((x296*x303)));
evalcond[1]=((((-1.0)*x298*x300))+(((-1.0)*x297*x303))+((x297*x302))+(((-1.0)*x299*x300))+(((0.17999999767801)*x297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj2)))))+(IKabs(((1.0)+sj2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=-1.0;
cj2=0;
j2=-1.57079633263667;
j1eval[0]=((-1.0)+(((-2.77777684225639)*px*sj0))+(((2.77777684225639)*cj0*py))+(((4.81125286612347)*cj0*px))+(((4.81125286612347)*py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x304=((((4.81125286612347)*py))+(((-2.77777684225639)*px)));
IkReal x305=((((4.81125286612347)*px))+(((2.77777684225639)*py)));
IkReal x306=((x305*x305)+(x304*x304));
if((((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))) < -0.00001)
continue;
IkReal x307=IKabs(IKsqrt(((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))));
CheckValue<IkReal> x314=IKPowWithIntegerCheck(x307,-1);
if(!x314.valid){
continue;
}
IkReal x308=x314.value;
IkReal x315 = x306;
if(IKabs(x315)==0){
continue;
}
IkReal x309=pow(x315,-0.5);
if((((1.0)+(((-1.0)*(x308*x308))))) < -0.00001)
continue;
IkReal x310=IKsqrt(((1.0)+(((-1.0)*(x308*x308)))));
IkReal x311=(x304*x309);
IkReal x312=(x308*x309);
IkReal x313=(x309*x310);
CheckValue<IkReal> x316 = IKatan2WithCheck(IkReal(x305),IkReal(x304),IKFAST_ATAN2_MAGTHRESH);
if(!x316.valid){
continue;
}
if((x306) < -0.00001)
continue;
CheckValue<IkReal> x317=IKPowWithIntegerCheck(IKabs(IKsqrt(x306)),-1);
if(!x317.valid){
continue;
}
if( (x317.value) < -1-IKFAST_SINCOS_THRESH || (x317.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst6=((((-1.0)*(x316.value)))+(IKasin(x317.value)));
IkReal gconst7=(((x308*x311))+(((-1.0)*x305*x313)));
IkReal gconst8=(((x305*x312))+((x310*x311)));
IkReal x318=x304;
IkReal x319=x305;
CheckValue<IkReal> x320 = IKatan2WithCheck(IkReal(x319),IkReal(x318),IKFAST_ATAN2_MAGTHRESH);
if(!x320.valid){
continue;
}
if((((x319*x319)+(x318*x318))) < -0.00001)
continue;
CheckValue<IkReal> x321=IKPowWithIntegerCheck(IKabs(IKsqrt(((x319*x319)+(x318*x318)))),-1);
if(!x321.valid){
continue;
}
if( (x321.value) < -1-IKFAST_SINCOS_THRESH || (x321.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x320.value)+(((-1.0)*(IKasin(x321.value))))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x322=(gconst7*px);
IkReal x323=(gconst8*py);
IkReal x324=(gconst8*px);
IkReal x325=(gconst7*py);
CheckValue<IkReal> x330=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*x323))+(((-0.499999825156179)*x322))+(((0.866025504730542)*x324))+(((0.866025504730542)*x325))),-1);
if(!x330.valid){
continue;
}
IkReal x326=x330.value;
IkReal x327=(gconst8*x326);
IkReal x328=((0.179999934734235)*x326);
IkReal x329=((0.31176917768119)*x326);
CheckValue<IkReal> x331=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*gconst7*py))+(((0.499999825156179)*x323))+(((-0.499999825156179)*x322))+(((0.866025504730542)*x324))),-1);
if(!x331.valid){
continue;
}
CheckValue<IkReal> x332=IKPowWithIntegerCheck(((-0.17999999767801)+(((-0.499999825156179)*x322))+(((0.499999825156179)*gconst8*py))+(((0.866025504730542)*x324))+(((0.866025504730542)*x325))),-1);
if(!x332.valid){
continue;
}
CheckValue<IkReal> x333=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*x323))+(((-0.499999825156179)*x322))+(((0.866025504730542)*gconst8*px))+(((0.866025504730542)*x325))),-1);
if(!x333.valid){
continue;
}
CheckValue<IkReal> x334=IKPowWithIntegerCheck(((-0.17999999767801)+(((-0.499999825156179)*gconst7*px))+(((0.499999825156179)*x323))+(((0.866025504730542)*x324))+(((0.866025504730542)*x325))),-1);
if(!x334.valid){
continue;
}
cj1array[0]=((((-0.31176917768119)*x325*(x331.value)))+(((-0.179999934734235)*x323*(x332.value)))+(((-0.31176917768119)*x324*(x333.value)))+((x326*(py*py)))+(((0.0323999991640835)*x326))+(((0.179999934734235)*x322*(x334.value)))+((x326*(px*px))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x335=IKsin(j1);
IkReal x336=IKcos(j1);
IkReal x337=((0.499999825156179)*py);
IkReal x338=((0.866025504730542)*px);
IkReal x339=(gconst8*x335);
IkReal x340=(gconst8*x336);
IkReal x341=((0.499999825156179)*gconst7*px);
IkReal x342=((0.866025504730542)*gconst7*py);
evalcond[0]=(((x335*x342))+(((-1.0)*x335*x341))+(((-0.17999999767801)*x335))+((x337*x339))+((x338*x339)));
evalcond[1]=(((x336*x341))+(((-1.0)*x336*x342))+(((0.17999999767801)*x336))+(((-1.0)*x337*x340))+(((-1.0)*x338*x340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x343=((((4.81125286612347)*py))+(((-2.77777684225639)*px)));
IkReal x344=((((4.81125286612347)*px))+(((2.77777684225639)*py)));
IkReal x345=((x343*x343)+(x344*x344));
if((((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))) < -0.00001)
continue;
IkReal x346=IKabs(IKsqrt(((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))));
CheckValue<IkReal> x352=IKPowWithIntegerCheck(x346,-1);
if(!x352.valid){
continue;
}
IkReal x347=x352.value;
IkReal x353 = x345;
if(IKabs(x353)==0){
continue;
}
IkReal x348=pow(x353,-0.5);
if((((1.0)+(((-1.0)*(x347*x347))))) < -0.00001)
continue;
IkReal x349=IKsqrt(((1.0)+(((-1.0)*(x347*x347)))));
IkReal x350=((1.0)*x347*x348);
IkReal x351=((1.0)*x348*x349);
CheckValue<IkReal> x354 = IKatan2WithCheck(IkReal(x344),IkReal(x343),IKFAST_ATAN2_MAGTHRESH);
if(!x354.valid){
continue;
}
if((x345) < -0.00001)
continue;
CheckValue<IkReal> x355=IKPowWithIntegerCheck(IKabs(IKsqrt(x345)),-1);
if(!x355.valid){
continue;
}
if( (x355.value) < -1-IKFAST_SINCOS_THRESH || (x355.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x354.value)))+(((-1.0)*(IKasin(x355.value)))));
IkReal gconst10=(((x344*x351))+((x343*x350)));
IkReal gconst11=(((x344*x350))+(((-1.0)*x343*x351)));
IkReal x356=j0;
CheckValue<IkReal> x361 = IKatan2WithCheck(IkReal(((((4.81125286612347)*px))+(((2.77777684225639)*py)))),IkReal(((((4.81125286612347)*py))+(((-2.77777684225639)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x361.valid){
continue;
}
IkReal x357=x361.value;
IkReal x358=x357;
if((((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x362=IKPowWithIntegerCheck(IKabs(IKsqrt(((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px)))))),-1);
if(!x362.valid){
continue;
}
if( (x362.value) < -1-IKFAST_SINCOS_THRESH || (x362.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x359=IKasin(x362.value);
IkReal x360=x359;
if((((9.86960440108936)+(((-3.14159265358979)*x360))+((x356*x359))+((x356*x357))+((j0*x358))+((j0*x356))+((j0*x360))+((x359*x360))+(((-3.14159265358979)*j0))+(((-3.14159265358979)*x358))+(((-3.14159265358979)*x356))+(((-3.14159265358979)*x357))+(((-3.14159265358979)*x359))+((x358*x359))+((x357*x360))+((x357*x358)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((-3.14159265358979)*x360))+((x356*x359))+((x356*x357))+((j0*x358))+((j0*x356))+((j0*x360))+((x359*x360))+(((-3.14159265358979)*j0))+(((-3.14159265358979)*x358))+(((-3.14159265358979)*x356))+(((-3.14159265358979)*x357))+(((-3.14159265358979)*x359))+((x358*x359))+((x357*x360))+((x357*x358)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x363=(gconst10*py);
IkReal x364=(gconst10*px);
IkReal x365=(gconst11*px);
IkReal x366=(gconst11*py);
CheckValue<IkReal> x370=IKPowWithIntegerCheck(((-0.17999999767801)+(((-0.499999825156179)*x364))+(((0.866025504730542)*x363))+(((0.866025504730542)*x365))+(((0.499999825156179)*x366))),-1);
if(!x370.valid){
continue;
}
IkReal x367=x370.value;
IkReal x368=((0.31176917768119)*x367);
IkReal x369=((0.179999934734235)*x367);
CheckValue<IkReal> x371=IKPowWithIntegerCheck(((-0.17999999767801)+(((-0.499999825156179)*x364))+(((0.866025504730542)*x363))+(((0.866025504730542)*x365))+(((0.499999825156179)*gconst11*py))),-1);
if(!x371.valid){
continue;
}
CheckValue<IkReal> x372=IKPowWithIntegerCheck(((-0.17999999767801)+(((-0.499999825156179)*x364))+(((0.866025504730542)*x365))+(((0.499999825156179)*x366))+(((0.866025504730542)*gconst10*py))),-1);
if(!x372.valid){
continue;
}
CheckValue<IkReal> x373=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x363))+(((0.866025504730542)*x365))+(((-0.499999825156179)*gconst10*px))+(((0.499999825156179)*x366))),-1);
if(!x373.valid){
continue;
}
CheckValue<IkReal> x374=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*gconst11*px))+(((-0.499999825156179)*x364))+(((0.866025504730542)*x363))+(((0.499999825156179)*x366))),-1);
if(!x374.valid){
continue;
}
cj1array[0]=((((-0.179999934734235)*x366*(x371.value)))+(((0.0323999991640835)*x367))+((x367*(px*px)))+(((-0.31176917768119)*x363*(x372.value)))+(((0.179999934734235)*x364*(x373.value)))+(((-0.31176917768119)*x365*(x374.value)))+((x367*(py*py))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x375=IKsin(j1);
IkReal x376=IKcos(j1);
IkReal x377=((0.499999825156179)*gconst11);
IkReal x378=((0.866025504730542)*gconst10);
IkReal x379=((0.499999825156179)*gconst10);
IkReal x380=((0.866025504730542)*gconst11);
IkReal x381=(py*x376);
IkReal x382=(py*x375);
IkReal x383=(px*x376);
IkReal x384=(px*x375);
evalcond[0]=(((x378*x382))+((x377*x382))+(((-1.0)*x379*x384))+(((-0.17999999767801)*x375))+((x380*x384)));
evalcond[1]=((((-1.0)*x380*x383))+(((0.17999999767801)*x376))+((x379*x383))+(((-1.0)*x378*x381))+(((-1.0)*x377*x381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x385=(px*sj0);
IkReal x386=(cj0*px);
IkReal x387=(cj0*py);
IkReal x388=(py*sj0);
CheckValue<IkReal> x393=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*x387))+(((-0.499999825156179)*x385))+(((0.866025504730542)*x388))+(((0.866025504730542)*x386))),-1);
if(!x393.valid){
continue;
}
IkReal x389=x393.value;
IkReal x390=((0.179999934734235)*x389);
IkReal x391=(sj0*x389);
IkReal x392=((0.31176917768119)*x389);
CheckValue<IkReal> x394=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*cj0*py))+(((-0.499999825156179)*x385))+(((0.866025504730542)*x388))+(((0.866025504730542)*x386))),-1);
if(!x394.valid){
continue;
}
CheckValue<IkReal> x395=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*x387))+(((-0.499999825156179)*x385))+(((0.866025504730542)*x386))+(((0.866025504730542)*py*sj0))),-1);
if(!x395.valid){
continue;
}
CheckValue<IkReal> x396=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*x387))+(((0.866025504730542)*cj0*px))+(((-0.499999825156179)*x385))+(((0.866025504730542)*x388))),-1);
if(!x396.valid){
continue;
}
CheckValue<IkReal> x397=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*x387))+(((-0.499999825156179)*px*sj0))+(((0.866025504730542)*x388))+(((0.866025504730542)*x386))),-1);
if(!x397.valid){
continue;
}
cj1array[0]=((((-0.179999934734235)*x387*(x394.value)))+(((-0.31176917768119)*x388*(x395.value)))+(((-0.31176917768119)*x386*(x396.value)))+(((0.0323999991640835)*x389))+(((0.179999934734235)*x385*(x397.value)))+((x389*(px*px)))+((x389*(py*py))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x398=IKsin(j1);
IkReal x399=IKcos(j1);
IkReal x400=((0.499999825156179)*cj0);
IkReal x401=((0.866025504730542)*sj0);
IkReal x402=(py*x399);
IkReal x403=(py*x398);
IkReal x404=((0.499999825156179)*px*sj0);
IkReal x405=((0.866025504730542)*cj0*px);
evalcond[0]=((((-0.17999999767801)*x398))+(((-1.0)*x398*x404))+((x398*x405))+((x400*x403))+((x401*x403)));
evalcond[1]=((((-1.0)*x401*x402))+(((-1.0)*x400*x402))+(((-1.0)*x399*x405))+(((0.17999999767801)*x399))+((x399*x404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj2)))))+(IKabs(((1.0)+sj2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=-1.0;
cj2=0;
j2=4.71238899791001;
j1eval[0]=((-1.0)+(((-2.77777684225639)*px*sj0))+(((2.77777684225639)*cj0*py))+(((4.81125286612347)*cj0*px))+(((4.81125286612347)*py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x406=((((4.81125286612347)*py))+(((-2.77777684225639)*px)));
IkReal x407=((((4.81125286612347)*px))+(((2.77777684225639)*py)));
IkReal x408=((x406*x406)+(x407*x407));
if((((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))) < -0.00001)
continue;
IkReal x409=IKabs(IKsqrt(((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))));
CheckValue<IkReal> x416=IKPowWithIntegerCheck(x409,-1);
if(!x416.valid){
continue;
}
IkReal x410=x416.value;
IkReal x417 = x408;
if(IKabs(x417)==0){
continue;
}
IkReal x411=pow(x417,-0.5);
if((((1.0)+(((-1.0)*(x410*x410))))) < -0.00001)
continue;
IkReal x412=IKsqrt(((1.0)+(((-1.0)*(x410*x410)))));
IkReal x413=(x406*x411);
IkReal x414=(x410*x411);
IkReal x415=(x411*x412);
if((x408) < -0.00001)
continue;
CheckValue<IkReal> x418=IKPowWithIntegerCheck(IKabs(IKsqrt(x408)),-1);
if(!x418.valid){
continue;
}
if( (x418.value) < -1-IKFAST_SINCOS_THRESH || (x418.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x419 = IKatan2WithCheck(IkReal(x407),IkReal(x406),IKFAST_ATAN2_MAGTHRESH);
if(!x419.valid){
continue;
}
IkReal gconst12=((IKasin(x418.value))+(((-1.0)*(x419.value))));
IkReal gconst13=(((x410*x413))+(((-1.0)*x407*x415)));
IkReal gconst14=(((x407*x414))+((x412*x413)));
IkReal x420=x406;
IkReal x421=x407;
if((((x420*x420)+(x421*x421))) < -0.00001)
continue;
CheckValue<IkReal> x422=IKPowWithIntegerCheck(IKabs(IKsqrt(((x420*x420)+(x421*x421)))),-1);
if(!x422.valid){
continue;
}
if( (x422.value) < -1-IKFAST_SINCOS_THRESH || (x422.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x423 = IKatan2WithCheck(IkReal(x421),IkReal(x420),IKFAST_ATAN2_MAGTHRESH);
if(!x423.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin(x422.value))))+(x423.value)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x424=(gconst14*px);
IkReal x425=(gconst14*py);
IkReal x426=(gconst13*py);
IkReal x427=(gconst13*px);
CheckValue<IkReal> x431=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x426))+(((0.866025504730542)*x424))+(((0.499999825156179)*x425))+(((-0.499999825156179)*x427))),-1);
if(!x431.valid){
continue;
}
IkReal x428=x431.value;
IkReal x429=((0.31176917768119)*x428);
IkReal x430=((0.179999934734235)*x428);
CheckValue<IkReal> x432=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x426))+(((0.866025504730542)*x424))+(((0.499999825156179)*gconst14*py))+(((-0.499999825156179)*x427))),-1);
if(!x432.valid){
continue;
}
CheckValue<IkReal> x433=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x426))+(((0.866025504730542)*x424))+(((-0.499999825156179)*gconst13*px))+(((0.499999825156179)*x425))),-1);
if(!x433.valid){
continue;
}
CheckValue<IkReal> x434=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*gconst13*py))+(((0.866025504730542)*x424))+(((0.499999825156179)*x425))+(((-0.499999825156179)*x427))),-1);
if(!x434.valid){
continue;
}
CheckValue<IkReal> x435=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*gconst14*px))+(((0.866025504730542)*x426))+(((0.499999825156179)*x425))+(((-0.499999825156179)*x427))),-1);
if(!x435.valid){
continue;
}
cj1array[0]=((((-0.179999934734235)*x425*(x432.value)))+(((0.179999934734235)*x427*(x433.value)))+(((-0.31176917768119)*x426*(x434.value)))+((x428*(px*px)))+((x428*(py*py)))+(((0.0323999991640835)*x428))+(((-0.31176917768119)*x424*(x435.value))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x436=IKsin(j1);
IkReal x437=IKcos(j1);
IkReal x438=(gconst14*px);
IkReal x439=((0.499999825156179)*px);
IkReal x440=((0.866025504730542)*x436);
IkReal x441=(gconst13*x437);
IkReal x442=((0.499999825156179)*gconst14*py);
evalcond[0]=((((-0.17999999767801)*x436))+((x438*x440))+((gconst13*py*x440))+((x436*x442))+(((-1.0)*gconst13*x436*x439)));
evalcond[1]=(((x439*x441))+(((-1.0)*x437*x442))+(((-0.866025504730542)*x437*x438))+(((0.17999999767801)*x437))+(((-0.866025504730542)*py*x441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x443=((((4.81125286612347)*py))+(((-2.77777684225639)*px)));
IkReal x444=((((4.81125286612347)*px))+(((2.77777684225639)*py)));
IkReal x445=((x443*x443)+(x444*x444));
if((((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))) < -0.00001)
continue;
IkReal x446=IKabs(IKsqrt(((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))));
CheckValue<IkReal> x452=IKPowWithIntegerCheck(x446,-1);
if(!x452.valid){
continue;
}
IkReal x447=x452.value;
IkReal x453 = x445;
if(IKabs(x453)==0){
continue;
}
IkReal x448=pow(x453,-0.5);
if((((1.0)+(((-1.0)*(x447*x447))))) < -0.00001)
continue;
IkReal x449=IKsqrt(((1.0)+(((-1.0)*(x447*x447)))));
IkReal x450=((1.0)*x447*x448);
IkReal x451=((1.0)*x448*x449);
if((x445) < -0.00001)
continue;
CheckValue<IkReal> x454=IKPowWithIntegerCheck(IKabs(IKsqrt(x445)),-1);
if(!x454.valid){
continue;
}
if( (x454.value) < -1-IKFAST_SINCOS_THRESH || (x454.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x455 = IKatan2WithCheck(IkReal(x444),IkReal(x443),IKFAST_ATAN2_MAGTHRESH);
if(!x455.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(IKasin(x454.value))))+(((-1.0)*(x455.value))));
IkReal gconst16=(((x443*x450))+((x444*x451)));
IkReal gconst17=((((-1.0)*x443*x451))+((x444*x450)));
IkReal x456=j0;
CheckValue<IkReal> x461 = IKatan2WithCheck(IkReal(((((4.81125286612347)*px))+(((2.77777684225639)*py)))),IkReal(((((4.81125286612347)*py))+(((-2.77777684225639)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x461.valid){
continue;
}
IkReal x457=x461.value;
IkReal x458=x457;
if((((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x462=IKPowWithIntegerCheck(IKabs(IKsqrt(((((30.8641983271572)*(py*py)))+(((30.8641983271572)*(px*px)))))),-1);
if(!x462.valid){
continue;
}
if( (x462.value) < -1-IKFAST_SINCOS_THRESH || (x462.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x459=IKasin(x462.value);
IkReal x460=x459;
if((((9.86960440108936)+((j0*x460))+((j0*x458))+((j0*x456))+(((-3.14159265358979)*j0))+(((-3.14159265358979)*x458))+(((-3.14159265358979)*x459))+(((-3.14159265358979)*x457))+(((-3.14159265358979)*x456))+((x459*x460))+((x458*x459))+(((-3.14159265358979)*x460))+((x457*x460))+((x456*x459))+((x456*x457))+((x457*x458)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((j0*x460))+((j0*x458))+((j0*x456))+(((-3.14159265358979)*j0))+(((-3.14159265358979)*x458))+(((-3.14159265358979)*x459))+(((-3.14159265358979)*x457))+(((-3.14159265358979)*x456))+((x459*x460))+((x458*x459))+(((-3.14159265358979)*x460))+((x457*x460))+((x456*x459))+((x456*x457))+((x457*x458)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x463=(gconst17*py);
IkReal x464=(gconst16*px);
IkReal x465=(gconst17*px);
IkReal x466=(gconst16*py);
CheckValue<IkReal> x471=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*x463))+(((0.866025504730542)*x465))+(((0.866025504730542)*x466))+(((-0.499999825156179)*x464))),-1);
if(!x471.valid){
continue;
}
IkReal x467=x471.value;
IkReal x468=(gconst17*x467);
IkReal x469=((0.179999934734235)*x467);
IkReal x470=((0.31176917768119)*x467);
CheckValue<IkReal> x472=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*x463))+(((0.866025504730542)*x465))+(((0.866025504730542)*x466))+(((-0.499999825156179)*gconst16*px))),-1);
if(!x472.valid){
continue;
}
CheckValue<IkReal> x473=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*x463))+(((0.866025504730542)*x465))+(((0.866025504730542)*gconst16*py))+(((-0.499999825156179)*x464))),-1);
if(!x473.valid){
continue;
}
CheckValue<IkReal> x474=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x465))+(((0.866025504730542)*x466))+(((-0.499999825156179)*x464))+(((0.499999825156179)*gconst17*py))),-1);
if(!x474.valid){
continue;
}
CheckValue<IkReal> x475=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*x463))+(((0.866025504730542)*x466))+(((0.866025504730542)*gconst17*px))+(((-0.499999825156179)*x464))),-1);
if(!x475.valid){
continue;
}
cj1array[0]=((((0.179999934734235)*x464*(x472.value)))+(((-0.31176917768119)*x466*(x473.value)))+(((-0.179999934734235)*x463*(x474.value)))+((x467*(px*px)))+(((0.0323999991640835)*x467))+((x467*(py*py)))+(((-0.31176917768119)*x465*(x475.value))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x476=IKsin(j1);
IkReal x477=IKcos(j1);
IkReal x478=((0.499999825156179)*gconst16);
IkReal x479=((0.866025504730542)*gconst17);
IkReal x480=((0.866025504730542)*gconst16*py);
IkReal x481=(px*x477);
IkReal x482=((0.499999825156179)*gconst17*py);
IkReal x483=(px*x476);
evalcond[0]=(((x476*x482))+((x476*x480))+(((-0.17999999767801)*x476))+((x479*x483))+(((-1.0)*x478*x483)));
evalcond[1]=((((0.17999999767801)*x477))+((x478*x481))+(((-1.0)*x479*x481))+(((-1.0)*x477*x480))+(((-1.0)*x477*x482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x484=(px*sj0);
IkReal x485=(cj0*px);
IkReal x486=(cj0*py);
IkReal x487=(py*sj0);
CheckValue<IkReal> x492=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x485))+(((0.866025504730542)*x487))+(((-0.499999825156179)*x484))+(((0.499999825156179)*x486))),-1);
if(!x492.valid){
continue;
}
IkReal x488=x492.value;
IkReal x489=((0.179999934734235)*x488);
IkReal x490=(sj0*x488);
IkReal x491=((0.31176917768119)*x488);
CheckValue<IkReal> x493=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x485))+(((0.866025504730542)*x487))+(((-0.499999825156179)*px*sj0))+(((0.499999825156179)*x486))),-1);
if(!x493.valid){
continue;
}
CheckValue<IkReal> x494=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.499999825156179)*cj0*py))+(((0.866025504730542)*x485))+(((0.866025504730542)*x487))+(((-0.499999825156179)*x484))),-1);
if(!x494.valid){
continue;
}
CheckValue<IkReal> x495=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x487))+(((0.866025504730542)*cj0*px))+(((-0.499999825156179)*x484))+(((0.499999825156179)*x486))),-1);
if(!x495.valid){
continue;
}
CheckValue<IkReal> x496=IKPowWithIntegerCheck(((-0.17999999767801)+(((0.866025504730542)*x485))+(((-0.499999825156179)*x484))+(((0.499999825156179)*x486))+(((0.866025504730542)*py*sj0))),-1);
if(!x496.valid){
continue;
}
cj1array[0]=((((0.179999934734235)*x484*(x493.value)))+(((-0.179999934734235)*x486*(x494.value)))+(((-0.31176917768119)*x485*(x495.value)))+((x488*(px*px)))+((x488*(py*py)))+(((0.0323999991640835)*x488))+(((-0.31176917768119)*x487*(x496.value))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x497=IKsin(j1);
IkReal x498=IKcos(j1);
IkReal x499=((0.499999825156179)*cj0);
IkReal x500=((0.866025504730542)*sj0);
IkReal x501=(py*x498);
IkReal x502=(py*x497);
IkReal x503=((0.499999825156179)*px*sj0);
IkReal x504=((0.866025504730542)*cj0*px);
evalcond[0]=(((x500*x502))+((x497*x504))+(((-1.0)*x497*x503))+((x499*x502))+(((-0.17999999767801)*x497)));
evalcond[1]=((((-1.0)*x499*x501))+((x498*x503))+(((-1.0)*x498*x504))+(((-1.0)*x500*x501))+(((0.17999999767801)*x498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x505=((0.5)*cj2);
IkReal x506=(cj0*pz);
IkReal x507=((1.73205100946108)*px);
IkReal x508=((0.999999650312357)*py);
IkReal x509=((0.866025504730542)*cj2);
IkReal x510=(py*sj0);
IkReal x511=((2.0)*pz);
IkReal x512=((1.0)*pz);
IkReal x513=(cj0*cj2);
IkReal x514=(cj2*px*sj0);
CheckValue<IkReal> x515=IKPowWithIntegerCheck((((x507*x513))+(((-0.999999650312357)*x514))+(((-1.0)*sj2*x511))+(((-1.0)*x511))+((x508*x513))+(((1.73205100946108)*cj2*x510))+(((-0.359999995356019)*cj2))),-1);
if(!x515.valid){
continue;
}
CheckValue<IkReal> x516=IKPowWithIntegerCheck(((((-0.499999825156179)*x514))+(((-1.0)*sj2*x512))+(((-0.17999999767801)*cj2))+(((0.499999825156179)*py*x513))+(((-1.0)*x512))+((cj0*px*x509))+((x509*x510))),-1);
if(!x516.valid){
continue;
}
if( IKabs(((x515.value)*(((cj2*cj2)+(((-4.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x516.value)*(((((-1.0)*x506*x508))+(((-1.0)*x506*x507))+((sj2*x505))+(((-1.73205100946108)*pz*x510))+(((0.999999650312357)*px*pz*sj0))+x505+(((0.359999995356019)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x515.value)*(((cj2*cj2)+(((-4.0)*(pz*pz)))))))+IKsqr(((x516.value)*(((((-1.0)*x506*x508))+(((-1.0)*x506*x507))+((sj2*x505))+(((-1.73205100946108)*pz*x510))+(((0.999999650312357)*px*pz*sj0))+x505+(((0.359999995356019)*pz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x515.value)*(((cj2*cj2)+(((-4.0)*(pz*pz)))))), ((x516.value)*(((((-1.0)*x506*x508))+(((-1.0)*x506*x507))+((sj2*x505))+(((-1.73205100946108)*pz*x510))+(((0.999999650312357)*px*pz*sj0))+x505+(((0.359999995356019)*pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x517=IKsin(j1);
IkReal x518=IKcos(j1);
IkReal x519=(py*sj0);
IkReal x520=((1.0)*pz);
IkReal x521=(cj0*px);
IkReal x522=(px*sj0);
IkReal x523=(cj0*py);
IkReal x524=((0.17999999767801)*x518);
IkReal x525=((0.866025504730542)*x518);
IkReal x526=((0.5)*x518);
IkReal x527=((0.5)*x517);
IkReal x528=((0.499999825156179)*x518);
IkReal x529=((0.499999825156179)*x517);
IkReal x530=((0.866025504730542)*x517);
IkReal x531=(x521*x525);
IkReal x532=(x523*x528);
IkReal x533=(x519*x525);
IkReal x534=(x522*x528);
IkReal x535=(x534+x524);
IkReal x536=(x531+x533+x532);
evalcond[0]=((((-1.0)*cj2*x526))+((sj2*x527))+(((-1.0)*x520))+x527);
evalcond[1]=((0.17999999767801)+((sj2*x526))+(((-0.499999825156179)*x523))+(((0.499999825156179)*x522))+x526+((cj2*x527))+(((-0.866025504730542)*x519))+(((-0.866025504730542)*x521)));
evalcond[2]=(((x519*x530))+(((-1.0)*x518*x520))+((x521*x530))+((x523*x529))+(((-1.0)*x522*x529))+(((-0.5)*cj2))+(((-0.17999999767801)*x517)));
evalcond[3]=((0.5)+(((0.5)*sj2))+(((-1.0)*x536))+(((-1.0)*x517*x520))+x535);
evalcond[4]=((-0.0323999991640835)+(((-1.0)*(px*px)))+(((-0.179999934734235)*x522))+((pz*x517))+(((-1.0)*x535))+(((0.179999934734235)*x523))+(((0.31176917768119)*x519))+x536+(((-1.0)*pz*x520))+(((-1.0)*(py*py)))+(((0.31176917768119)*x521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x537=((0.866025504730542)*sj2);
IkReal x538=(cj0*px);
IkReal x539=((0.5)*cj2);
IkReal x540=(py*sj0);
IkReal x541=((1.73205100946108)*pz);
IkReal x542=(px*sj0);
IkReal x543=((0.999999650312357)*pz);
IkReal x544=((0.499999825156179)*cj0*py);
CheckValue<IkReal> x545=IKPowWithIntegerCheck(IKsign(((-0.17999999767801)+(((-0.499999825156179)*sj2*x542))+((sj2*x544))+(((0.866025504730542)*x540))+(((0.866025504730542)*x538))+((x537*x538))+((x537*x540))+(((-0.499999825156179)*x542))+x544+(((-0.17999999767801)*sj2))+((cj2*pz)))),-1);
if(!x545.valid){
continue;
}
CheckValue<IkReal> x546 = IKatan2WithCheck(IkReal((((cj0*py*x543))+(((-1.0)*x542*x543))+(((-0.359999995356019)*pz))+((sj2*x539))+((x540*x541))+x539+((x538*x541)))),IkReal(((1.0)+sj2+(((-1.0)*cj2*x539))+(((-2.0)*(pz*pz))))),IKFAST_ATAN2_MAGTHRESH);
if(!x546.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x545.value)))+(x546.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x547=IKsin(j1);
IkReal x548=IKcos(j1);
IkReal x549=(py*sj0);
IkReal x550=((1.0)*pz);
IkReal x551=(cj0*px);
IkReal x552=(px*sj0);
IkReal x553=(cj0*py);
IkReal x554=((0.17999999767801)*x548);
IkReal x555=((0.866025504730542)*x548);
IkReal x556=((0.5)*x548);
IkReal x557=((0.5)*x547);
IkReal x558=((0.499999825156179)*x548);
IkReal x559=((0.499999825156179)*x547);
IkReal x560=((0.866025504730542)*x547);
IkReal x561=(x551*x555);
IkReal x562=(x553*x558);
IkReal x563=(x549*x555);
IkReal x564=(x552*x558);
IkReal x565=(x554+x564);
IkReal x566=(x562+x563+x561);
evalcond[0]=((((-1.0)*cj2*x556))+((sj2*x557))+(((-1.0)*x550))+x557);
evalcond[1]=((0.17999999767801)+((sj2*x556))+(((-0.499999825156179)*x553))+x556+(((0.499999825156179)*x552))+(((-0.866025504730542)*x551))+((cj2*x557))+(((-0.866025504730542)*x549)));
evalcond[2]=(((x551*x560))+((x549*x560))+(((-1.0)*x548*x550))+(((-1.0)*x552*x559))+(((-0.17999999767801)*x547))+(((-0.5)*cj2))+((x553*x559)));
evalcond[3]=((0.5)+(((0.5)*sj2))+(((-1.0)*x547*x550))+x565+(((-1.0)*x566)));
evalcond[4]=((-0.0323999991640835)+(((-1.0)*(px*px)))+(((-0.179999934734235)*x552))+(((0.179999934734235)*x553))+x566+(((-1.0)*pz*x550))+(((-1.0)*(py*py)))+(((0.31176917768119)*x551))+(((0.31176917768119)*x549))+((pz*x547))+(((-1.0)*x565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x567=((2.0)*sj2);
IkReal x568=((2.0)*pz);
IkReal x569=((1.73205100946108)*py*sj0);
IkReal x570=((0.999999650312357)*px*sj0);
IkReal x571=((1.73205100946108)*cj0*px);
IkReal x572=((0.999999650312357)*cj0*py);
CheckValue<IkReal> x573=IKPowWithIntegerCheck(IKsign(((2.0)+x567)),-1);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x570))+((cj2*x569))+((cj2*x572))+((cj2*x571))+x568+((pz*x567))+(((-0.359999995356019)*cj2)))),IkReal(((-0.359999995356019)+(((-0.359999995356019)*sj2))+(((-1.0)*sj2*x570))+((sj2*x571))+((sj2*x572))+(((-1.0)*x570))+x571+x572+x569+((sj2*x569))+(((-1.0)*cj2*x568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x573.value)))+(x574.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x575=IKsin(j1);
IkReal x576=IKcos(j1);
IkReal x577=(py*sj0);
IkReal x578=((1.0)*pz);
IkReal x579=(cj0*px);
IkReal x580=(px*sj0);
IkReal x581=(cj0*py);
IkReal x582=((0.17999999767801)*x576);
IkReal x583=((0.866025504730542)*x576);
IkReal x584=((0.5)*x576);
IkReal x585=((0.5)*x575);
IkReal x586=((0.499999825156179)*x576);
IkReal x587=((0.499999825156179)*x575);
IkReal x588=((0.866025504730542)*x575);
IkReal x589=(x579*x583);
IkReal x590=(x581*x586);
IkReal x591=(x577*x583);
IkReal x592=(x580*x586);
IkReal x593=(x582+x592);
IkReal x594=(x589+x591+x590);
evalcond[0]=(((sj2*x585))+(((-1.0)*x578))+x585+(((-1.0)*cj2*x584)));
evalcond[1]=((0.17999999767801)+(((0.499999825156179)*x580))+((sj2*x584))+(((-0.499999825156179)*x581))+x584+(((-0.866025504730542)*x579))+(((-0.866025504730542)*x577))+((cj2*x585)));
evalcond[2]=((((-1.0)*x580*x587))+((x581*x587))+((x579*x588))+((x577*x588))+(((-1.0)*x576*x578))+(((-0.17999999767801)*x575))+(((-0.5)*cj2)));
evalcond[3]=((0.5)+(((0.5)*sj2))+(((-1.0)*x594))+(((-1.0)*x575*x578))+x593);
evalcond[4]=((-0.0323999991640835)+(((-1.0)*(px*px)))+((pz*x575))+(((-1.0)*x593))+(((-1.0)*pz*x578))+x594+(((0.179999934734235)*x581))+(((0.31176917768119)*x577))+(((0.31176917768119)*x579))+(((-0.179999934734235)*x580))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - EISpider (d29ee95e2959a248bf3a3777252eedc4)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
