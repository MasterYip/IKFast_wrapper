/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2023-12-13 09:55:58.357728
/// Generated using solver translation3d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
x0=IKsin(j[0]);
x1=IKsin(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[0]);
x6=((8.5e-7)*x1);
x7=((8.5e-7)*x4);
x8=((0.232)*x4);
x9=((0.232)*x1);
x10=(x0*x2);
x11=(x2*x5);
x12=(x0*x3);
x13=(x3*x5);
eetrans[0]=((-0.3)+(((-9.6e-7)*x12))+(((0.13)*x10))+(((-0.0535)*x5))+(((-1.0)*x10*x8))+((x10*x6))+((x12*x7))+((x12*x9))+(((0.14999)*x0)));
eetrans[1]=((0.08)+(((-9.6e-7)*x13))+(((0.13)*x11))+(((0.0535)*x0))+(((-1.0)*x11*x8))+((x11*x6))+(((0.14999)*x5))+((x13*x9))+((x13*x7)));
IkReal x14=((1.0)*x2);
eetrans[2]=((-0.034056)+(((9.6e-7)*x2))+(((0.13)*x3))+(((-1.0)*x3*x8))+((x3*x6))+(((-1.0)*x14*x7))+(((-1.0)*x14*x9)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((0.3)+px);
new_py=((0.08)+(((-1.0)*py)));
new_pz=((-0.034056)+(((-1.0)*pz)));
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j12eval[2];
j12eval[0]=((px*px)+(py*py));
j12eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
if( (((0.84697032327434)+(((-16.5782493363067)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((0.84697032327434)+(((-16.5782493363067)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x15=IKasin(((0.84697032327434)+(((-16.5782493363067)*(pz*pz)))));
j14array[0]=((1.57080004761718)+(((-1.0)*x15)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((4.71239270120697)+x15);
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IkReal j13eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x16=pz*pz;
IkReal x17=(pz*sj14);
IkReal x18=(cj14*pz);
j13eval[0]=((1.0)+(((44.4503709630156)*x16)));
j13eval[1]=IKsign(((224970001.0)+(((10000000000.0)*x16))));
j13eval[2]=((IKabs(((1439.904)+(((-347976800.0)*sj14))+(((-8500.0)*x17))+(((2320000000.0)*x18))+(((-1274.915)*cj14))+(((-1300000000.0)*pz)))))+(IKabs(((-194987000.0)+(((-1274.915)*sj14))+(((2320000000.0)*x17))+(((-9600.0)*pz))+(((347976800.0)*cj14))+(((8500.0)*x18))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x19=pz*pz;
IkReal x20=(cj14*pz);
IkReal x21=(pz*sj14);
j13eval[0]=((1.0)+(((44.4503709630156)*x19)));
j13eval[1]=((IKabs(((-0.0037437504)+(((5108.92498998009)*pz))+(((0.0221)*x21))+(((-100000.0)*(pz*pz*pz)))+(((-2.4478368e-8)*sj14))+(((-6032.0)*x20))+(((0.00668115456)*cj14)))))+(IKabs(((-766.287659247114)+(((-0.02496)*pz))+(((-0.003314779)*sj14))+(((14999.0)*x19))+(((-1.632e-7)*x21))+(((904.73968)*cj14))+(((0.044544)*x20))))));
j13eval[2]=IKsign(((0.0043194240192)+(((0.192)*x19))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
px=0;
py=0;
pp=pz*pz;
j13eval[0]=((1.12941176470588)+(((-272941.176470588)*sj14))+(((6.66711114074272)*pz*sj14))+(((-1.0)*cj14))+(((1019675.82152536)*pz))+(((-1819729.15841448)*cj14*pz)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j12, j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x22=cj14*cj14;
IkReal x23=(cj14*pz);
IkReal x24=(pz*sj14);
IkReal x25=(cj14*sj14);
CheckValue<IkReal> x26=IKPowWithIntegerCheck(((0.01439904)+(((13000.0)*pz))+(((-23200.0)*x23))+(((0.085)*x24))+(((-3479.768)*sj14))+(((-0.01274915)*cj14))),-1);
if(!x26.valid){
continue;
}
CheckValue<IkReal> x27=IKPowWithIntegerCheck(((1439.904)+(((-347976800.0)*sj14))+(((-1274.915)*cj14))+(((8500.0)*x24))+(((1300000000.0)*pz))+(((-2320000000.0)*x23))),-1);
if(!x27.valid){
continue;
}
if( IKabs(((x26.value)*(((0.00724)+(((3015.9999999184)*sj14))+(((-0.03944)*x22))+(((-5382.39999992775)*x25))+(((-14999.0)*pz))+(((0.033322)*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x27.value)*(((55970000.992775)+(((603200000.0)*cj14))+(((-538239999.992775)*x22))+(((-2210.0)*sj14))+(((3944.0)*x25)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x26.value)*(((0.00724)+(((3015.9999999184)*sj14))+(((-0.03944)*x22))+(((-5382.39999992775)*x25))+(((-14999.0)*pz))+(((0.033322)*cj14))))))+IKsqr(((x27.value)*(((55970000.992775)+(((603200000.0)*cj14))+(((-538239999.992775)*x22))+(((-2210.0)*sj14))+(((3944.0)*x25))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x26.value)*(((0.00724)+(((3015.9999999184)*sj14))+(((-0.03944)*x22))+(((-5382.39999992775)*x25))+(((-14999.0)*pz))+(((0.033322)*cj14))))), ((x27.value)*(((55970000.992775)+(((603200000.0)*cj14))+(((-538239999.992775)*x22))+(((-2210.0)*sj14))+(((3944.0)*x25))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x28=IKcos(j13);
IkReal x29=IKsin(j13);
IkReal x30=((1.0)*pz);
IkReal x31=((0.232)*cj14);
IkReal x32=((0.232)*sj14);
IkReal x33=((8.5e-7)*cj14);
IkReal x34=((8.5e-7)*sj14);
evalcond[0]=((-0.13)+(((-1.0)*x28*x30))+(((-1.0)*x34))+(((-0.14999)*x29))+x31);
evalcond[1]=((-9.6e-7)+(((-1.0)*x29*x30))+x33+x32+(((0.14999)*x28)));
evalcond[2]=((0.0172892498998009)+(((-1.0)*pz*x30))+(((-0.26)*pz*x28))+(((2.879808e-7)*x28))+(((-1.92e-6)*pz*x29))+(((-0.0389974)*x29)));
evalcond[3]=((-0.14999)+(((-1.0)*x29*x34))+((x29*x31))+(((-1.0)*x28*x32))+(((-1.0)*x28*x33))+(((-0.13)*x29))+(((9.6e-7)*x28)));
evalcond[4]=((((-9.6e-7)*x29))+((x29*x33))+((x29*x32))+(((-1.0)*x28*x34))+((x28*x31))+(((-1.0)*x30))+(((-0.13)*x28)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x35=pz*pz;
IkReal x36=(cj14*pz);
IkReal x37=(pz*sj14);
CheckValue<IkReal> x38=IKPowWithIntegerCheck(IKsign(((0.0043194240192)+(((0.192)*x35)))),-1);
if(!x38.valid){
continue;
}
CheckValue<IkReal> x39 = IKatan2WithCheck(IkReal(((-0.0037437504)+(((5108.92498998009)*pz))+(((-6032.0)*x36))+(((-100000.0)*(pz*pz*pz)))+(((0.0221)*x37))+(((-2.4478368e-8)*sj14))+(((0.00668115456)*cj14)))),IkReal(((-766.287659247114)+(((14999.0)*x35))+(((-0.02496)*pz))+(((-0.003314779)*sj14))+(((0.044544)*x36))+(((904.73968)*cj14))+(((-1.632e-7)*x37)))),IKFAST_ATAN2_MAGTHRESH);
if(!x39.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x38.value)))+(x39.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x40=IKcos(j13);
IkReal x41=IKsin(j13);
IkReal x42=((1.0)*pz);
IkReal x43=((0.232)*cj14);
IkReal x44=((0.232)*sj14);
IkReal x45=((8.5e-7)*cj14);
IkReal x46=((8.5e-7)*sj14);
evalcond[0]=((-0.13)+(((-1.0)*x46))+(((-1.0)*x40*x42))+(((-0.14999)*x41))+x43);
evalcond[1]=((-9.6e-7)+(((-1.0)*x41*x42))+x44+x45+(((0.14999)*x40)));
evalcond[2]=((0.0172892498998009)+(((-1.0)*pz*x42))+(((2.879808e-7)*x40))+(((-0.26)*pz*x40))+(((-0.0389974)*x41))+(((-1.92e-6)*pz*x41)));
evalcond[3]=((-0.14999)+((x41*x43))+(((-1.0)*x41*x46))+(((-1.0)*x40*x45))+(((-1.0)*x40*x44))+(((9.6e-7)*x40))+(((-0.13)*x41)));
evalcond[4]=(((x41*x44))+((x41*x45))+((x40*x43))+(((-1.0)*x42))+(((-1.0)*x40*x46))+(((-9.6e-7)*x41))+(((-0.13)*x40)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x47=(pz*sj14);
IkReal x48=(cj14*pz);
CheckValue<IkReal> x49=IKPowWithIntegerCheck(IKsign(((224970001.0)+(((10000000000.0)*(pz*pz))))),-1);
if(!x49.valid){
continue;
}
CheckValue<IkReal> x50 = IKatan2WithCheck(IkReal(((-194987000.0)+(((2320000000.0)*x47))+(((-1274.915)*sj14))+(((-9600.0)*pz))+(((8500.0)*x48))+(((347976800.0)*cj14)))),IkReal(((1439.904)+(((2320000000.0)*x48))+(((-8500.0)*x47))+(((-347976800.0)*sj14))+(((-1274.915)*cj14))+(((-1300000000.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x50.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x49.value)))+(x50.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x51=IKcos(j13);
IkReal x52=IKsin(j13);
IkReal x53=((1.0)*pz);
IkReal x54=((0.232)*cj14);
IkReal x55=((0.232)*sj14);
IkReal x56=((8.5e-7)*cj14);
IkReal x57=((8.5e-7)*sj14);
evalcond[0]=((-0.13)+(((-1.0)*x51*x53))+x54+(((-0.14999)*x52))+(((-1.0)*x57)));
evalcond[1]=((-9.6e-7)+(((-1.0)*x52*x53))+(((0.14999)*x51))+x55+x56);
evalcond[2]=((0.0172892498998009)+(((-1.92e-6)*pz*x52))+(((-0.0389974)*x52))+(((-0.26)*pz*x51))+(((-1.0)*pz*x53))+(((2.879808e-7)*x51)));
evalcond[3]=((-0.14999)+(((-1.0)*x52*x57))+(((-1.0)*x51*x56))+(((-1.0)*x51*x55))+(((9.6e-7)*x51))+((x52*x54))+(((-0.13)*x52)));
evalcond[4]=((((-1.0)*x51*x57))+(((-9.6e-7)*x52))+((x52*x55))+((x52*x56))+((x51*x54))+(((-1.0)*x53))+(((-0.13)*x51)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
if( (((0.84697032327434)+(((-16.5782493363067)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((0.84697032327434)+(((-16.5782493363067)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x58=IKasin(((0.84697032327434)+(((-16.5782493363067)*(pz*pz)))));
j14array[0]=((1.57080004761718)+(((-1.0)*x58)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((4.71239270120697)+x58);
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IkReal j13eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x59=pz*pz;
IkReal x60=(pz*sj14);
IkReal x61=(cj14*pz);
j13eval[0]=((1.0)+(((44.4503709630156)*x59)));
j13eval[1]=IKsign(((224970001.0)+(((10000000000.0)*x59))));
j13eval[2]=((IKabs(((-194987000.0)+(((-1274.915)*sj14))+(((8500.0)*x61))+(((-9600.0)*pz))+(((347976800.0)*cj14))+(((2320000000.0)*x60)))))+(IKabs(((1439.904)+(((-347976800.0)*sj14))+(((-1274.915)*cj14))+(((-1300000000.0)*pz))+(((-8500.0)*x60))+(((2320000000.0)*x61))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x62=pz*pz;
IkReal x63=(cj14*pz);
IkReal x64=(pz*sj14);
j13eval[0]=((1.0)+(((44.4503709630156)*x62)));
j13eval[1]=((IKabs(((-766.287659247114)+(((0.044544)*x63))+(((-0.02496)*pz))+(((-0.003314779)*sj14))+(((14999.0)*x62))+(((-1.632e-7)*x64))+(((904.73968)*cj14)))))+(IKabs(((-0.0037437504)+(((5108.92498998009)*pz))+(((-100000.0)*(pz*pz*pz)))+(((-2.4478368e-8)*sj14))+(((-6032.0)*x63))+(((0.0221)*x64))+(((0.00668115456)*cj14))))));
j13eval[2]=IKsign(((0.0043194240192)+(((0.192)*x62))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
px=0;
py=0;
pp=pz*pz;
j13eval[0]=((1.12941176470588)+(((-272941.176470588)*sj14))+(((6.66711114074272)*pz*sj14))+(((-1.0)*cj14))+(((1019675.82152536)*pz))+(((-1819729.15841448)*cj14*pz)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x65=((-1.0)+(((-1819729.15841448)*pz)));
IkReal x66=((-272941.176470588)+(((6.66711114074272)*pz)));
IkReal x67=((1.12941176470588)+(((1019675.82152536)*pz)));
IkReal x68=((x66*x66)+(x65*x65));
if((((74496885814.1488)+(((3311414210028.33)*(pz*pz))))) < -0.00001)
continue;
IkReal x69=IKabs(IKsqrt(((74496885814.1488)+(((3311414210028.33)*(pz*pz))))));
CheckValue<IkReal> x75=IKPowWithIntegerCheck(x69,-1);
if(!x75.valid){
continue;
}
IkReal x70=x75.value;
IkReal x76 = x68;
if(IKabs(x76)==0){
continue;
}
IkReal x71=pow(x76,-0.5);
if((((1.0)+(((-1.0)*(x67*x67)*(x70*x70))))) < -0.00001)
continue;
IkReal x72=IKsqrt(((1.0)+(((-1.0)*(x67*x67)*(x70*x70)))));
IkReal x73=((1.0)*x67*x70*x71);
IkReal x74=(x71*x72);
CheckValue<IkReal> x77 = IKatan2WithCheck(IkReal(x65),IkReal(x66),IKFAST_ATAN2_MAGTHRESH);
if(!x77.valid){
continue;
}
if((x68) < -0.00001)
continue;
CheckValue<IkReal> x78=IKPowWithIntegerCheck(IKabs(IKsqrt(x68)),-1);
if(!x78.valid){
continue;
}
if( ((x67*(x78.value))) < -1-IKFAST_SINCOS_THRESH || ((x67*(x78.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x77.value)))+(((-1.0)*(IKasin((x67*(x78.value)))))));
IkReal gconst1=((((-1.0)*x66*x73))+(((-1.0)*x65*x74)));
IkReal gconst2=(((x66*x74))+(((-1.0)*x65*x73)));
IkReal x79=j14;
CheckValue<IkReal> x85 = IKatan2WithCheck(IkReal(((-1.0)+(((-1819729.15841448)*pz)))),IkReal(((-272941.176470588)+(((6.66711114074272)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x85.valid){
continue;
}
IkReal x80=x85.value;
IkReal x81=x80;
if((((74496885814.1488)+(((3311414210028.33)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x86=IKPowWithIntegerCheck(IKabs(IKsqrt(((74496885814.1488)+(((3311414210028.33)*(pz*pz)))))),-1);
if(!x86.valid){
continue;
}
IkReal x82=x86.value;
if( (((((1.12941176470588)*x82))+(((1019675.82152536)*pz*x82)))) < -1-IKFAST_SINCOS_THRESH || (((((1.12941176470588)*x82))+(((1019675.82152536)*pz*x82)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x83=IKasin(((((1.12941176470588)*x82))+(((1019675.82152536)*pz*x82))));
IkReal x84=x83;
if(((((x79*x83))+((x79*x80))+((x81*x83))+((j14*x79))+((j14*x81))+((j14*x84))+((x83*x84))+((x80*x81))+((x80*x84)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x79*x83))+((x79*x80))+((x81*x83))+((j14*x79))+((j14*x81))+((j14*x84))+((x83*x84))+((x80*x81))+((x80*x84)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[2];
IkReal x87=((6.66711114074272)*pz);
IkReal x88=x65;
IkReal x89=pz*pz;
IkReal x90=((-272941.176470588)+x87);
IkReal x91=((1.12941176470588)+(((1019675.82152536)*pz)));
IkReal x92=((x90*x90)+(x88*x88));
IkReal x93=x69;
CheckValue<IkReal> x101=IKPowWithIntegerCheck(x93,-1);
if(!x101.valid){
continue;
}
IkReal x94=x101.value;
IkReal x102 = x92;
if(IKabs(x102)==0){
continue;
}
IkReal x95=pow(x102,-0.5);
if((x92) < -0.00001)
continue;
CheckValue<IkReal> x103=IKPowWithIntegerCheck(IKabs(IKsqrt(x92)),-1);
if(!x103.valid){
continue;
}
IkReal x96=x103.value;
IkReal x97=((1.0)*x88*x95);
if((((1.0)+(((-1.0)*(x91*x91)*(x94*x94))))) < -0.00001)
continue;
IkReal x98=IKsqrt(((1.0)+(((-1.0)*(x91*x91)*(x94*x94)))));
IkReal x99=((1.0)*x91*x94*x95);
IkReal x100=(x95*x98);
px=0;
py=0;
pp=x89;
sj14=gconst1;
cj14=gconst2;
CheckValue<IkReal> x104 = IKatan2WithCheck(IkReal(((-1.0)+(((-1818181.81818182)*pz)))),IkReal(((-273224.043715847)+x87)),IKFAST_ATAN2_MAGTHRESH);
if(!x104.valid){
continue;
}
if( ((x96*(((1.12941176)+(((1020408.16326531)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x96*(((1.12941176)+(((1020408.16326531)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j14=((((-1.0)*(x104.value)))+(((-1.0)*(IKasin((x96*(((1.12941176)+(((1020408.16326531)*pz))))))))));
CheckValue<IkReal> x105 = IKatan2WithCheck(IkReal(x88),IkReal(x90),IKFAST_ATAN2_MAGTHRESH);
if(!x105.valid){
continue;
}
if( ((x91*x96)) < -1-IKFAST_SINCOS_THRESH || ((x91*x96)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x105.value)))+(((-1.0)*(IKasin((x91*x96))))));
IkReal gconst1=((((-1.0)*x90*x99))+(((-1.0)*x97*x98)));
IkReal gconst2=(((x100*x90))+(((-1.0)*x91*x94*x97)));
IkReal x106=pz*pz;
j13eval[0]=((1.0)+(((44.4503709630156)*x106)));
j13eval[1]=IKsign(((224970001.0)+(((10000000000.0)*x106))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x107=gconst1*gconst1;
IkReal x108=gconst2*gconst2;
IkReal x109=(gconst2*pz);
IkReal x110=(gconst1*pz);
IkReal x111=(gconst1*gconst2);
CheckValue<IkReal> x112=IKPowWithIntegerCheck(((-194987000.0)+(((9600.0)*pz))+(((347976800.0)*gconst2))+(((-8500.0)*x109))+(((-2320000000.0)*x110))+(((-1274.915)*gconst1))),-1);
if(!x112.valid){
continue;
}
CheckValue<IkReal> x113=IKPowWithIntegerCheck(((-1949.87)+(((-0.085)*x109))+(((-23200.0)*x110))+(((3479.768)*gconst2))+(((-0.01274915)*gconst1))+(((0.096)*pz))),-1);
if(!x113.valid){
continue;
}
if( IKabs(((x112.value)*(((224970000.990784)+(((-3944.0)*x111))+(((4454.4)*gconst1))+(((0.01632)*gconst2))+(((-0.007225)*x108))+(((-538240000.0)*x107)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x113.value)*(((-0.01248)+(((-0.01972)*x108))+(((-5382.39999992775)*x111))+(((0.01972)*x107))+(((3015.9999999184)*gconst1))+(((0.033322)*gconst2))+(((14999.0)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x112.value)*(((224970000.990784)+(((-3944.0)*x111))+(((4454.4)*gconst1))+(((0.01632)*gconst2))+(((-0.007225)*x108))+(((-538240000.0)*x107))))))+IKsqr(((x113.value)*(((-0.01248)+(((-0.01972)*x108))+(((-5382.39999992775)*x111))+(((0.01972)*x107))+(((3015.9999999184)*gconst1))+(((0.033322)*gconst2))+(((14999.0)*pz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x112.value)*(((224970000.990784)+(((-3944.0)*x111))+(((4454.4)*gconst1))+(((0.01632)*gconst2))+(((-0.007225)*x108))+(((-538240000.0)*x107))))), ((x113.value)*(((-0.01248)+(((-0.01972)*x108))+(((-5382.39999992775)*x111))+(((0.01972)*x107))+(((3015.9999999184)*gconst1))+(((0.033322)*gconst2))+(((14999.0)*pz))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x114=IKcos(j13);
IkReal x115=IKsin(j13);
IkReal x116=((1.0)*pz);
IkReal x117=((0.232)*gconst1);
IkReal x118=((8.5e-7)*gconst2);
IkReal x119=((8.5e-7)*gconst1);
IkReal x120=((0.232)*gconst2);
evalcond[0]=((-0.13)+(((-1.0)*x119))+x120+(((-1.0)*x114*x116))+(((-0.14999)*x115)));
evalcond[1]=((-9.6e-7)+(((0.14999)*x114))+(((-1.0)*x115*x116))+x117+x118);
evalcond[2]=((0.0172892498998009)+(((-0.26)*pz*x114))+(((2.879808e-7)*x114))+(((-0.0389974)*x115))+(((-1.92e-6)*pz*x115))+(((-1.0)*pz*x116)));
evalcond[3]=((-0.14999)+(((9.6e-7)*x114))+(((-0.13)*x115))+(((-1.0)*x115*x119))+(((-1.0)*x114*x118))+(((-1.0)*x114*x117))+((x115*x120)));
evalcond[4]=((((-9.6e-7)*x115))+(((-0.13)*x114))+((x114*x120))+(((-1.0)*x116))+(((-1.0)*x114*x119))+((x115*x118))+((x115*x117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x121=(gconst2*pz);
IkReal x122=(gconst1*pz);
CheckValue<IkReal> x123=IKPowWithIntegerCheck(IKsign(((224970001.0)+(((10000000000.0)*(pz*pz))))),-1);
if(!x123.valid){
continue;
}
CheckValue<IkReal> x124 = IKatan2WithCheck(IkReal(((-194987000.0)+(((347976800.0)*gconst2))+(((2320000000.0)*x122))+(((-9600.0)*pz))+(((8500.0)*x121))+(((-1274.915)*gconst1)))),IkReal(((1439.904)+(((-8500.0)*x122))+(((2320000000.0)*x121))+(((-1300000000.0)*pz))+(((-347976800.0)*gconst1))+(((-1274.915)*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x124.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x123.value)))+(x124.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x125=IKcos(j13);
IkReal x126=IKsin(j13);
IkReal x127=((1.0)*pz);
IkReal x128=((0.232)*gconst1);
IkReal x129=((8.5e-7)*gconst2);
IkReal x130=((8.5e-7)*gconst1);
IkReal x131=((0.232)*gconst2);
evalcond[0]=((-0.13)+x131+(((-1.0)*x130))+(((-1.0)*x125*x127))+(((-0.14999)*x126)));
evalcond[1]=((-9.6e-7)+(((-1.0)*x126*x127))+x128+x129+(((0.14999)*x125)));
evalcond[2]=((0.0172892498998009)+(((-0.26)*pz*x125))+(((-1.0)*pz*x127))+(((-0.0389974)*x126))+(((2.879808e-7)*x125))+(((-1.92e-6)*pz*x126)));
evalcond[3]=((-0.14999)+(((9.6e-7)*x125))+(((-0.13)*x126))+(((-1.0)*x126*x130))+((x126*x131))+(((-1.0)*x125*x129))+(((-1.0)*x125*x128)));
evalcond[4]=((((-0.13)*x125))+(((-9.6e-7)*x126))+(((-1.0)*x127))+((x125*x131))+(((-1.0)*x125*x130))+((x126*x128))+((x126*x129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x132=((-1.0)+(((-1819729.15841448)*pz)));
IkReal x133=((-272941.176470588)+(((6.66711114074272)*pz)));
IkReal x134=((1.12941176470588)+(((1019675.82152536)*pz)));
IkReal x135=((x132*x132)+(x133*x133));
if((((74496885814.1488)+(((3311414210028.33)*(pz*pz))))) < -0.00001)
continue;
IkReal x136=IKabs(IKsqrt(((74496885814.1488)+(((3311414210028.33)*(pz*pz))))));
CheckValue<IkReal> x143=IKPowWithIntegerCheck(x136,-1);
if(!x143.valid){
continue;
}
IkReal x137=x143.value;
IkReal x144 = x135;
if(IKabs(x144)==0){
continue;
}
IkReal x138=pow(x144,-0.5);
IkReal x139=((1.0)*x138);
IkReal x140=(x134*x137);
IkReal x141=(x132*x139);
if((((1.0)+(((-1.0)*(x140*x140))))) < -0.00001)
continue;
IkReal x142=IKsqrt(((1.0)+(((-1.0)*(x140*x140)))));
CheckValue<IkReal> x145 = IKatan2WithCheck(IkReal(x132),IkReal(x133),IKFAST_ATAN2_MAGTHRESH);
if(!x145.valid){
continue;
}
if((x135) < -0.00001)
continue;
CheckValue<IkReal> x146=IKPowWithIntegerCheck(IKabs(IKsqrt(x135)),-1);
if(!x146.valid){
continue;
}
if( ((x134*(x146.value))) < -1-IKFAST_SINCOS_THRESH || ((x134*(x146.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x145.value)))+(IKasin((x134*(x146.value)))));
IkReal gconst4=((((-1.0)*x133*x139*x140))+((x141*x142)));
IkReal gconst5=((((-1.0)*x133*x139*x142))+(((-1.0)*x140*x141)));
IkReal x147=x132;
IkReal x148=((-272941.176470588)+(((6.66711114074272)*pz)));
CheckValue<IkReal> x149 = IKatan2WithCheck(IkReal(x147),IkReal(x148),IKFAST_ATAN2_MAGTHRESH);
if(!x149.valid){
continue;
}
if((((x147*x147)+(x148*x148))) < -0.00001)
continue;
CheckValue<IkReal> x150=IKPowWithIntegerCheck(IKabs(IKsqrt(((x147*x147)+(x148*x148)))),-1);
if(!x150.valid){
continue;
}
if( (((x150.value)*(((1.12941176470588)+(((1019675.82152536)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x150.value)*(((1.12941176470588)+(((1019675.82152536)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14+(x149.value)+(((-1.0)*(IKasin(((x150.value)*(((1.12941176470588)+(((1019675.82152536)*pz))))))))))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[2];
IkReal x151=((6.66711114074272)*pz);
IkReal x152=x132;
IkReal x153=pz*pz;
IkReal x154=((-272941.176470588)+x151);
IkReal x155=((1.12941176470588)+(((1019675.82152536)*pz)));
IkReal x156=((x152*x152)+(x154*x154));
IkReal x157=x136;
CheckValue<IkReal> x165=IKPowWithIntegerCheck(x157,-1);
if(!x165.valid){
continue;
}
IkReal x158=x165.value;
IkReal x166 = x156;
if(IKabs(x166)==0){
continue;
}
IkReal x159=pow(x166,-0.5);
IkReal x160=((1.0)*x159);
IkReal x161=(x155*x158);
if((x156) < -0.00001)
continue;
CheckValue<IkReal> x167=IKPowWithIntegerCheck(IKabs(IKsqrt(x156)),-1);
if(!x167.valid){
continue;
}
IkReal x162=x167.value;
IkReal x163=(x152*x160);
if((((1.0)+(((-1.0)*(x161*x161))))) < -0.00001)
continue;
IkReal x164=IKsqrt(((1.0)+(((-1.0)*(x161*x161)))));
px=0;
py=0;
pp=x153;
sj14=gconst4;
cj14=gconst5;
if( ((x162*(((1.12941176)+(((1020408.16326531)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x162*(((1.12941176)+(((1020408.16326531)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x168 = IKatan2WithCheck(IkReal(((-1.0)+(((-1818181.81818182)*pz)))),IkReal(((-273224.043715847)+x151)),IKFAST_ATAN2_MAGTHRESH);
if(!x168.valid){
continue;
}
j14=((3.14159265)+(IKasin((x162*(((1.12941176)+(((1020408.16326531)*pz)))))))+(((-1.0)*(x168.value))));
if( ((x155*x162)) < -1-IKFAST_SINCOS_THRESH || ((x155*x162)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x169 = IKatan2WithCheck(IkReal(x152),IkReal(x154),IKFAST_ATAN2_MAGTHRESH);
if(!x169.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(IKasin((x155*x162)))+(((-1.0)*(x169.value))));
IkReal gconst4=((((-1.0)*x154*x160*x161))+((x163*x164)));
IkReal gconst5=((((-1.0)*x154*x160*x164))+(((-1.0)*x161*x163)));
IkReal x170=pz*pz;
j13eval[0]=((1.0)+(((44.4503709630156)*x170)));
j13eval[1]=IKsign(((224970001.0)+(((10000000000.0)*x170))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x171=gconst4*gconst4;
IkReal x172=gconst5*gconst5;
IkReal x173=(gconst4*gconst5);
IkReal x174=(gconst4*pz);
IkReal x175=(gconst5*pz);
CheckValue<IkReal> x176=IKPowWithIntegerCheck(((0.01439904)+(((13000.0)*pz))+(((-3479.768)*gconst4))+(((-0.01274915)*gconst5))+(((0.085)*x174))+(((-23200.0)*x175))),-1);
if(!x176.valid){
continue;
}
CheckValue<IkReal> x177=IKPowWithIntegerCheck(((1439.904)+(((-2320000000.0)*x175))+(((8500.0)*x174))+(((-347976800.0)*gconst4))+(((1300000000.0)*pz))+(((-1274.915)*gconst5))),-1);
if(!x177.valid){
continue;
}
if( IKabs(((x176.value)*(((-0.01248)+(((-5382.39999992775)*x173))+(((0.01972)*x171))+(((-0.01972)*x172))+(((3015.9999999184)*gconst4))+(((-14999.0)*pz))+(((0.033322)*gconst5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x177.value)*(((55970001.0)+(((-2210.0)*gconst4))+(((-538240000.0)*x172))+(((603200000.0)*gconst5))+(((3944.0)*x173))+(((-0.007225)*x171)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x176.value)*(((-0.01248)+(((-5382.39999992775)*x173))+(((0.01972)*x171))+(((-0.01972)*x172))+(((3015.9999999184)*gconst4))+(((-14999.0)*pz))+(((0.033322)*gconst5))))))+IKsqr(((x177.value)*(((55970001.0)+(((-2210.0)*gconst4))+(((-538240000.0)*x172))+(((603200000.0)*gconst5))+(((3944.0)*x173))+(((-0.007225)*x171))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x176.value)*(((-0.01248)+(((-5382.39999992775)*x173))+(((0.01972)*x171))+(((-0.01972)*x172))+(((3015.9999999184)*gconst4))+(((-14999.0)*pz))+(((0.033322)*gconst5))))), ((x177.value)*(((55970001.0)+(((-2210.0)*gconst4))+(((-538240000.0)*x172))+(((603200000.0)*gconst5))+(((3944.0)*x173))+(((-0.007225)*x171))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x178=IKcos(j13);
IkReal x179=IKsin(j13);
IkReal x180=((1.0)*pz);
IkReal x181=((8.5e-7)*gconst5);
IkReal x182=((0.232)*gconst4);
IkReal x183=((8.5e-7)*gconst4);
IkReal x184=((0.232)*gconst5);
evalcond[0]=((-0.13)+(((-1.0)*x178*x180))+(((-0.14999)*x179))+(((-1.0)*x183))+x184);
evalcond[1]=((-9.6e-7)+(((0.14999)*x178))+x181+x182+(((-1.0)*x179*x180)));
evalcond[2]=((0.0172892498998009)+(((-1.0)*pz*x180))+(((-0.0389974)*x179))+(((-1.92e-6)*pz*x179))+(((-0.26)*pz*x178))+(((2.879808e-7)*x178)));
evalcond[3]=((-0.14999)+(((9.6e-7)*x178))+(((-1.0)*x178*x182))+(((-1.0)*x178*x181))+((x179*x184))+(((-0.13)*x179))+(((-1.0)*x179*x183)));
evalcond[4]=((((-1.0)*x178*x183))+((x178*x184))+(((-1.0)*x180))+((x179*x182))+((x179*x181))+(((-0.13)*x178))+(((-9.6e-7)*x179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x185=(gconst4*pz);
IkReal x186=(gconst5*pz);
CheckValue<IkReal> x187=IKPowWithIntegerCheck(IKsign(((224970001.0)+(((10000000000.0)*(pz*pz))))),-1);
if(!x187.valid){
continue;
}
CheckValue<IkReal> x188 = IKatan2WithCheck(IkReal(((-194987000.0)+(((347976800.0)*gconst5))+(((8500.0)*x186))+(((2320000000.0)*x185))+(((-9600.0)*pz))+(((-1274.915)*gconst4)))),IkReal(((1439.904)+(((-8500.0)*x185))+(((2320000000.0)*x186))+(((-1300000000.0)*pz))+(((-347976800.0)*gconst4))+(((-1274.915)*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x188.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x187.value)))+(x188.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x189=IKcos(j13);
IkReal x190=IKsin(j13);
IkReal x191=((1.0)*pz);
IkReal x192=((8.5e-7)*gconst5);
IkReal x193=((0.232)*gconst4);
IkReal x194=((8.5e-7)*gconst4);
IkReal x195=((0.232)*gconst5);
evalcond[0]=((-0.13)+(((-1.0)*x189*x191))+(((-0.14999)*x190))+(((-1.0)*x194))+x195);
evalcond[1]=((-9.6e-7)+(((-1.0)*x190*x191))+(((0.14999)*x189))+x193+x192);
evalcond[2]=((0.0172892498998009)+(((-1.0)*pz*x191))+(((-1.92e-6)*pz*x190))+(((-0.0389974)*x190))+(((-0.26)*pz*x189))+(((2.879808e-7)*x189)));
evalcond[3]=((-0.14999)+(((9.6e-7)*x189))+(((-1.0)*x189*x192))+(((-1.0)*x189*x193))+(((-1.0)*x190*x194))+(((-0.13)*x190))+((x190*x195)));
evalcond[4]=((((-1.0)*x189*x194))+(((-1.0)*x191))+((x189*x195))+(((-0.13)*x189))+((x190*x193))+((x190*x192))+(((-9.6e-7)*x190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x196=cj14*cj14;
IkReal x197=(cj14*pz);
IkReal x198=(pz*sj14);
IkReal x199=(cj14*sj14);
CheckValue<IkReal> x200=IKPowWithIntegerCheck(((0.01439904)+(((13000.0)*pz))+(((0.085)*x198))+(((-3479.768)*sj14))+(((-0.01274915)*cj14))+(((-23200.0)*x197))),-1);
if(!x200.valid){
continue;
}
CheckValue<IkReal> x201=IKPowWithIntegerCheck(((1439.904)+(((-347976800.0)*sj14))+(((-2320000000.0)*x197))+(((-1274.915)*cj14))+(((8500.0)*x198))+(((1300000000.0)*pz))),-1);
if(!x201.valid){
continue;
}
if( IKabs(((x200.value)*(((0.00724)+(((3015.9999999184)*sj14))+(((-0.03944)*x196))+(((-14999.0)*pz))+(((0.033322)*cj14))+(((-5382.39999992775)*x199)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x201.value)*(((55970000.992775)+(((603200000.0)*cj14))+(((-538239999.992775)*x196))+(((3944.0)*x199))+(((-2210.0)*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x200.value)*(((0.00724)+(((3015.9999999184)*sj14))+(((-0.03944)*x196))+(((-14999.0)*pz))+(((0.033322)*cj14))+(((-5382.39999992775)*x199))))))+IKsqr(((x201.value)*(((55970000.992775)+(((603200000.0)*cj14))+(((-538239999.992775)*x196))+(((3944.0)*x199))+(((-2210.0)*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x200.value)*(((0.00724)+(((3015.9999999184)*sj14))+(((-0.03944)*x196))+(((-14999.0)*pz))+(((0.033322)*cj14))+(((-5382.39999992775)*x199))))), ((x201.value)*(((55970000.992775)+(((603200000.0)*cj14))+(((-538239999.992775)*x196))+(((3944.0)*x199))+(((-2210.0)*sj14))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x202=IKcos(j13);
IkReal x203=IKsin(j13);
IkReal x204=((1.0)*pz);
IkReal x205=((0.232)*cj14);
IkReal x206=((0.232)*sj14);
IkReal x207=((8.5e-7)*cj14);
IkReal x208=((8.5e-7)*sj14);
evalcond[0]=((-0.13)+(((-1.0)*x202*x204))+(((-1.0)*x208))+x205+(((-0.14999)*x203)));
evalcond[1]=((-9.6e-7)+(((-1.0)*x203*x204))+(((0.14999)*x202))+x207+x206);
evalcond[2]=((0.0172892498998009)+(((-0.26)*pz*x202))+(((-1.0)*pz*x204))+(((2.879808e-7)*x202))+(((-1.92e-6)*pz*x203))+(((-0.0389974)*x203)));
evalcond[3]=((-0.14999)+(((-1.0)*x203*x208))+(((-1.0)*x202*x207))+(((-1.0)*x202*x206))+(((-0.13)*x203))+(((9.6e-7)*x202))+((x203*x205)));
evalcond[4]=((((-9.6e-7)*x203))+(((-1.0)*x202*x208))+(((-0.13)*x202))+(((-1.0)*x204))+((x202*x205))+((x203*x207))+((x203*x206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x209=pz*pz;
IkReal x210=(cj14*pz);
IkReal x211=(pz*sj14);
CheckValue<IkReal> x212 = IKatan2WithCheck(IkReal(((-0.0037437504)+(((0.0221)*x211))+(((5108.92498998009)*pz))+(((-6032.0)*x210))+(((-100000.0)*(pz*pz*pz)))+(((-2.4478368e-8)*sj14))+(((0.00668115456)*cj14)))),IkReal(((-766.287659247114)+(((-0.02496)*pz))+(((-0.003314779)*sj14))+(((-1.632e-7)*x211))+(((0.044544)*x210))+(((904.73968)*cj14))+(((14999.0)*x209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x212.valid){
continue;
}
CheckValue<IkReal> x213=IKPowWithIntegerCheck(IKsign(((0.0043194240192)+(((0.192)*x209)))),-1);
if(!x213.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x212.value)+(((1.5707963267949)*(x213.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x214=IKcos(j13);
IkReal x215=IKsin(j13);
IkReal x216=((1.0)*pz);
IkReal x217=((0.232)*cj14);
IkReal x218=((0.232)*sj14);
IkReal x219=((8.5e-7)*cj14);
IkReal x220=((8.5e-7)*sj14);
evalcond[0]=((-0.13)+x217+(((-1.0)*x214*x216))+(((-1.0)*x220))+(((-0.14999)*x215)));
evalcond[1]=((-9.6e-7)+x218+x219+(((0.14999)*x214))+(((-1.0)*x215*x216)));
evalcond[2]=((0.0172892498998009)+(((-1.0)*pz*x216))+(((-0.0389974)*x215))+(((-0.26)*pz*x214))+(((-1.92e-6)*pz*x215))+(((2.879808e-7)*x214)));
evalcond[3]=((-0.14999)+(((-1.0)*x215*x220))+((x215*x217))+(((-1.0)*x214*x218))+(((-1.0)*x214*x219))+(((-0.13)*x215))+(((9.6e-7)*x214)));
evalcond[4]=(((x214*x217))+(((-1.0)*x214*x220))+((x215*x219))+((x215*x218))+(((-9.6e-7)*x215))+(((-0.13)*x214))+(((-1.0)*x216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x221=(pz*sj14);
IkReal x222=(cj14*pz);
CheckValue<IkReal> x223 = IKatan2WithCheck(IkReal(((-194987000.0)+(((-1274.915)*sj14))+(((2320000000.0)*x221))+(((8500.0)*x222))+(((-9600.0)*pz))+(((347976800.0)*cj14)))),IkReal(((1439.904)+(((-347976800.0)*sj14))+(((2320000000.0)*x222))+(((-1274.915)*cj14))+(((-8500.0)*x221))+(((-1300000000.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x223.valid){
continue;
}
CheckValue<IkReal> x224=IKPowWithIntegerCheck(IKsign(((224970001.0)+(((10000000000.0)*(pz*pz))))),-1);
if(!x224.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x223.value)+(((1.5707963267949)*(x224.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x225=IKcos(j13);
IkReal x226=IKsin(j13);
IkReal x227=((1.0)*pz);
IkReal x228=((0.232)*cj14);
IkReal x229=((0.232)*sj14);
IkReal x230=((8.5e-7)*cj14);
IkReal x231=((8.5e-7)*sj14);
evalcond[0]=((-0.13)+(((-1.0)*x225*x227))+(((-0.14999)*x226))+(((-1.0)*x231))+x228);
evalcond[1]=((-9.6e-7)+x229+x230+(((0.14999)*x225))+(((-1.0)*x226*x227)));
evalcond[2]=((0.0172892498998009)+(((-0.26)*pz*x225))+(((2.879808e-7)*x225))+(((-1.0)*pz*x227))+(((-0.0389974)*x226))+(((-1.92e-6)*pz*x226)));
evalcond[3]=((-0.14999)+(((9.6e-7)*x225))+(((-1.0)*x225*x230))+(((-1.0)*x225*x229))+(((-0.13)*x226))+(((-1.0)*x226*x231))+((x226*x228)));
evalcond[4]=((((-1.0)*x225*x231))+((x225*x228))+((x226*x230))+(((-0.13)*x225))+((x226*x229))+(((-9.6e-7)*x226))+(((-1.0)*x227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j13, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x234 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x234.valid){
continue;
}
IkReal x232=((1.0)*(x234.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x235=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x235.valid){
continue;
}
if( (((0.0535)*(x235.value))) < -1-IKFAST_SINCOS_THRESH || (((0.0535)*(x235.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x233=IKasin(((0.0535)*(x235.value)));
j12array[0]=((((-1.0)*x232))+x233);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x232))+(((-1.0)*x233)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
if( (((-0.84697032327434)+(((4.97314323590529)*cj12*py))+(((16.5782493363067)*(px*px)))+(((-4.97314323590529)*px*sj12))+(((16.5782493363067)*(pz*pz)))+(((16.5782493363067)*(py*py))))) < -1-IKFAST_SINCOS_THRESH || (((-0.84697032327434)+(((4.97314323590529)*cj12*py))+(((16.5782493363067)*(px*px)))+(((-4.97314323590529)*px*sj12))+(((16.5782493363067)*(pz*pz)))+(((16.5782493363067)*(py*py))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x236=IKasin(((-0.84697032327434)+(((4.97314323590529)*cj12*py))+(((16.5782493363067)*(px*px)))+(((-4.97314323590529)*px*sj12))+(((16.5782493363067)*(pz*pz)))+(((16.5782493363067)*(py*py)))));
j14array[0]=((1.57080004761718)+(((1.0)*x236)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((4.71239270120697)+(((-1.0)*x236)));
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IkReal j13eval[3];
IkReal x237=cj14*cj14;
IkReal x238=(cj12*py);
IkReal x239=(pz*sj14);
IkReal x240=(cj14*pz);
IkReal x241=((8.5e-7)*sj14);
IkReal x242=(px*sj12);
IkReal x243=((6.66711114074272)*sj14);
IkReal x244=((0.232)*cj14);
IkReal x245=((1819729.15841448)*cj14);
IkReal x246=(cj14*sj14);
j13eval[0]=((152941.176470588)+(((-1019675.82152536)*x242))+(((-1.0)*x242*x243))+((x238*x243))+(((1019675.82152536)*x238))+(((6.66711114074272)*x240))+(((-7.52991375895648)*pz))+(((-272941.176470588)*cj14))+sj14+(((1819729.15841448)*x239))+(((-1.0)*x238*x245))+((x242*x245)));
j13eval[1]=IKsign(((0.0194987)+(((8.5e-7)*x240))+(((-0.13)*x242))+(((-0.03479768)*cj14))+(((-9.6e-7)*pz))+((x238*x241))+(((1.274915e-7)*sj14))+(((0.13)*x238))+(((-1.0)*x241*x242))+(((0.232)*x239))+(((-1.0)*x238*x244))+((x242*x244))));
j13eval[2]=((IKabs(((-0.0169000000007225)+(((-0.0538239999992775)*x237))+(pz*pz)+(((-2.21e-7)*sj14))+(((3.944e-7)*x246))+(((0.06032)*cj14)))))+(IKabs(((-7.24e-8)+(((-3.3322e-7)*cj14))+(((-0.14999)*pz))+(((-0.030159999999184)*sj14))+(((3.944e-7)*x237))+(((0.0538239999992775)*x246))+((pz*x242))+(((-1.0)*pz*x238))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
IkReal x247=cj14*cj14;
IkReal x248=(px*sj12);
IkReal x249=(cj12*py);
IkReal x250=((8.5e-7)*cj14);
IkReal x251=((1819729.15841448)*sj14);
IkReal x252=((0.232)*sj14);
IkReal x253=(cj14*sj14);
IkReal x254=(pz*sj14);
IkReal x255=(cj14*pz);
IkReal x256=((6.66711114074272)*cj14);
j13eval[0]=((-1.12941176470588)+(((-1019675.82152536)*pz))+((x249*x251))+((x249*x256))+(((1819729.15841448)*x255))+(((272941.176470588)*sj14))+cj14+(((-6.66711114074272)*x254))+(((-1.0)*x248*x256))+(((-1.0)*x248*x251))+(((7.52991375895648)*x248))+(((-7.52991375895648)*x249)));
j13eval[1]=IKsign(((-1.439904e-7)+(((1.274915e-7)*cj14))+((x249*x250))+((x249*x252))+(((0.232)*x255))+(((0.03479768)*sj14))+(((-9.6e-7)*x249))+(((-1.0)*x248*x250))+(((-1.0)*x248*x252))+(((-8.5e-7)*x254))+(((9.6e-7)*x248))+(((-0.13)*pz))));
j13eval[2]=((IKabs(((-0.0538240000009216)+(((4.4544e-7)*sj14))+(((-3.944e-7)*x253))+(pz*pz)+(((1.632e-12)*cj14))+(((0.0538239999992775)*x247)))))+(IKabs(((-7.24e-8)+(((-3.3322e-7)*cj14))+(((0.0538239999992775)*x253))+(((0.14999)*pz))+(((-1.0)*pz*x248))+(((-0.030159999999184)*sj14))+((pz*x249))+(((3.944e-7)*x247))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
IkReal x257=(px*sj12);
IkReal x258=(cj12*py);
IkReal x259=((8.5e-7)*cj14);
IkReal x260=((1819729.15841448)*sj14);
IkReal x261=((0.232)*sj14);
IkReal x262=(pz*sj14);
IkReal x263=((6.66711114074272)*cj14);
IkReal x264=(cj14*pz);
j13eval[0]=((1.12941176470588)+(((7.52991375895648)*x258))+(((-7.52991375895648)*x257))+(((-1.0)*x258*x263))+(((-1.0)*x258*x260))+(((6.66711114074272)*x262))+(((-272941.176470588)*sj14))+(((-1819729.15841448)*x264))+((x257*x263))+((x257*x260))+(((-1.0)*cj14))+(((1019675.82152536)*pz)));
j13eval[1]=IKsign(((1.439904e-7)+(((9.6e-7)*x258))+(((-0.232)*x264))+(((-1.0)*x258*x261))+((x257*x259))+((x257*x261))+(((-1.274915e-7)*cj14))+(((-9.6e-7)*x257))+(((0.13)*pz))+(((-1.0)*x258*x259))+(((-0.03479768)*sj14))+(((8.5e-7)*x262))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x265=cj14*cj14;
IkReal x266=cj12*cj12;
IkReal x267=px*px;
IkReal x268=(px*sj12);
IkReal x269=(cj12*py);
IkReal x270=((8.5e-7)*cj14);
IkReal x271=((0.232)*sj14);
IkReal x272=(cj14*sj14);
CheckValue<IkReal> x273 = IKatan2WithCheck(IkReal(((7.24e-8)+(((-1.0)*pz*x269))+(((0.030159999999184)*sj14))+(((-0.14999)*pz))+(((-3.944e-7)*x265))+(((-0.0538239999992775)*x272))+((pz*x268))+(((3.3322e-7)*cj14)))),IkReal(((0.0055970000992775)+(((0.29998)*x269))+(((-2.0)*x268*x269))+((x266*(py*py)))+(((-0.29998)*x268))+x267+(((-0.0538239999992775)*x265))+(((-2.21e-7)*sj14))+(((-1.0)*x266*x267))+(((3.944e-7)*x272))+(((0.06032)*cj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x273.valid){
continue;
}
CheckValue<IkReal> x274=IKPowWithIntegerCheck(IKsign(((1.439904e-7)+(((8.5e-7)*pz*sj14))+(((-9.6e-7)*x268))+(((-1.0)*x269*x271))+(((-1.0)*x269*x270))+(((-1.274915e-7)*cj14))+(((0.13)*pz))+(((9.6e-7)*x269))+(((-0.03479768)*sj14))+(((-0.232)*cj14*pz))+((x268*x271))+((x268*x270)))),-1);
if(!x274.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x273.value)+(((1.5707963267949)*(x274.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x275=IKsin(j13);
IkReal x276=IKcos(j13);
IkReal x277=((1.0)*pz);
IkReal x278=((0.232)*cj14);
IkReal x279=(px*sj12);
IkReal x280=((0.232)*sj14);
IkReal x281=((8.5e-7)*cj14);
IkReal x282=((8.5e-7)*sj14);
IkReal x283=(cj12*py);
IkReal x284=((1.0)*x283);
IkReal x285=((0.26)*x275);
IkReal x286=((1.92e-6)*x276);
evalcond[0]=((-0.13)+((x275*x279))+(((-0.14999)*x275))+x278+(((-1.0)*x282))+(((-1.0)*x275*x284))+(((-1.0)*x276*x277)));
evalcond[1]=((-9.6e-7)+(((-1.0)*x276*x279))+(((0.14999)*x276))+x281+x280+(((-1.0)*x275*x277))+((x276*x283)));
evalcond[2]=((((-0.13)*x276))+(((-1.0)*x276*x282))+(((-9.6e-7)*x275))+((x275*x280))+((x275*x281))+(((-1.0)*x277))+((x276*x278)));
evalcond[3]=((-0.14999)+((x275*x278))+(((-0.13)*x275))+(((-1.0)*x276*x281))+(((-1.0)*x276*x280))+x279+(((-1.0)*x284))+(((9.6e-7)*x276))+(((-1.0)*x275*x282)));
evalcond[4]=((0.0172892498998009)+(((-1.0)*pz*x277))+(((-0.29998)*x283))+(((-1.92e-6)*pz*x275))+(((-0.0389974)*x275))+(((-1.0)*(px*px)))+(((2.879808e-7)*x276))+(((0.29998)*x279))+((x279*x285))+(((-0.26)*pz*x276))+(((-1.0)*(py*py)))+(((-1.0)*x279*x286))+((x283*x286))+(((-1.0)*x283*x285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x287=cj14*cj14;
IkReal x288=(px*sj12);
IkReal x289=(cj12*py);
IkReal x290=((8.5e-7)*cj14);
IkReal x291=((0.232)*sj14);
IkReal x292=(cj14*sj14);
CheckValue<IkReal> x293=IKPowWithIntegerCheck(IKsign(((-1.439904e-7)+((x289*x290))+((x289*x291))+(((1.274915e-7)*cj14))+(((0.03479768)*sj14))+(((-9.6e-7)*x289))+(((-8.5e-7)*pz*sj14))+(((-1.0)*x288*x290))+(((-1.0)*x288*x291))+(((0.232)*cj14*pz))+(((9.6e-7)*x288))+(((-0.13)*pz)))),-1);
if(!x293.valid){
continue;
}
CheckValue<IkReal> x294 = IKatan2WithCheck(IkReal(((-7.24e-8)+(((-3.3322e-7)*cj14))+(((3.944e-7)*x287))+(((0.14999)*pz))+(((-0.030159999999184)*sj14))+(((-1.0)*pz*x288))+(((0.0538239999992775)*x292))+((pz*x289)))),IkReal(((-0.0538240000009216)+(((4.4544e-7)*sj14))+(((0.0538239999992775)*x287))+(pz*pz)+(((1.632e-12)*cj14))+(((-3.944e-7)*x292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x294.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x293.value)))+(x294.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x295=IKsin(j13);
IkReal x296=IKcos(j13);
IkReal x297=((1.0)*pz);
IkReal x298=((0.232)*cj14);
IkReal x299=(px*sj12);
IkReal x300=((0.232)*sj14);
IkReal x301=((8.5e-7)*cj14);
IkReal x302=((8.5e-7)*sj14);
IkReal x303=(cj12*py);
IkReal x304=((1.0)*x303);
IkReal x305=((0.26)*x295);
IkReal x306=((1.92e-6)*x296);
evalcond[0]=((-0.13)+(((-1.0)*x296*x297))+(((-1.0)*x295*x304))+(((-0.14999)*x295))+x298+((x295*x299))+(((-1.0)*x302)));
evalcond[1]=((-9.6e-7)+(((0.14999)*x296))+x300+x301+((x296*x303))+(((-1.0)*x295*x297))+(((-1.0)*x296*x299)));
evalcond[2]=((((-1.0)*x296*x302))+(((-1.0)*x297))+(((-0.13)*x296))+((x295*x301))+((x295*x300))+((x296*x298))+(((-9.6e-7)*x295)));
evalcond[3]=((-0.14999)+(((-1.0)*x296*x300))+(((-1.0)*x296*x301))+(((9.6e-7)*x296))+(((-1.0)*x295*x302))+x299+(((-0.13)*x295))+((x295*x298))+(((-1.0)*x304)));
evalcond[4]=((0.0172892498998009)+(((-1.0)*(px*px)))+(((-1.0)*pz*x297))+(((-0.26)*pz*x296))+(((-1.0)*x303*x305))+((x303*x306))+((x299*x305))+(((-0.29998)*x303))+(((2.879808e-7)*x296))+(((-1.0)*x299*x306))+(((0.29998)*x299))+(((-1.92e-6)*pz*x295))+(((-1.0)*(py*py)))+(((-0.0389974)*x295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x307=cj14*cj14;
IkReal x308=(cj12*py);
IkReal x309=((8.5e-7)*sj14);
IkReal x310=(cj14*sj14);
IkReal x311=((0.232)*cj14);
IkReal x312=(px*sj12);
CheckValue<IkReal> x313 = IKatan2WithCheck(IkReal(((-0.0169000000007225)+(((3.944e-7)*x310))+(((-0.0538239999992775)*x307))+(pz*pz)+(((-2.21e-7)*sj14))+(((0.06032)*cj14)))),IkReal(((-7.24e-8)+(((0.0538239999992775)*x310))+(((-3.3322e-7)*cj14))+(((-0.14999)*pz))+(((-1.0)*pz*x308))+(((-0.030159999999184)*sj14))+((pz*x312))+(((3.944e-7)*x307)))),IKFAST_ATAN2_MAGTHRESH);
if(!x313.valid){
continue;
}
CheckValue<IkReal> x314=IKPowWithIntegerCheck(IKsign(((0.0194987)+(((-0.03479768)*cj14))+(((-9.6e-7)*pz))+(((-0.13)*x312))+(((1.274915e-7)*sj14))+(((8.5e-7)*cj14*pz))+(((-1.0)*x308*x311))+((x308*x309))+((x311*x312))+(((-1.0)*x309*x312))+(((0.13)*x308))+(((0.232)*pz*sj14)))),-1);
if(!x314.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x313.value)+(((1.5707963267949)*(x314.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x315=IKsin(j13);
IkReal x316=IKcos(j13);
IkReal x317=((1.0)*pz);
IkReal x318=((0.232)*cj14);
IkReal x319=(px*sj12);
IkReal x320=((0.232)*sj14);
IkReal x321=((8.5e-7)*cj14);
IkReal x322=((8.5e-7)*sj14);
IkReal x323=(cj12*py);
IkReal x324=((1.0)*x323);
IkReal x325=((0.26)*x315);
IkReal x326=((1.92e-6)*x316);
evalcond[0]=((-0.13)+(((-0.14999)*x315))+(((-1.0)*x322))+(((-1.0)*x315*x324))+((x315*x319))+x318+(((-1.0)*x316*x317)));
evalcond[1]=((-9.6e-7)+(((0.14999)*x316))+(((-1.0)*x316*x319))+x320+x321+(((-1.0)*x315*x317))+((x316*x323)));
evalcond[2]=((((-0.13)*x316))+(((-1.0)*x317))+(((-1.0)*x316*x322))+((x315*x321))+((x315*x320))+(((-9.6e-7)*x315))+((x316*x318)));
evalcond[3]=((-0.14999)+(((-0.13)*x315))+(((-1.0)*x324))+(((-1.0)*x315*x322))+((x315*x318))+x319+(((-1.0)*x316*x321))+(((-1.0)*x316*x320))+(((9.6e-7)*x316)));
evalcond[4]=((0.0172892498998009)+(((-0.0389974)*x315))+(((-0.26)*pz*x316))+(((-1.0)*(px*px)))+((x323*x326))+(((-0.29998)*x323))+(((-1.0)*x323*x325))+(((2.879808e-7)*x316))+(((-1.0)*x319*x326))+(((-1.0)*pz*x317))+(((0.29998)*x319))+(((-1.0)*(py*py)))+(((-1.92e-6)*pz*x315))+((x319*x325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - el_mini (98de38158894393cc6f5422e4264add1)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
